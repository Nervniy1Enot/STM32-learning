
FIRST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000009e0  080001d0  080001d0  000101d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08000bb0  08000bb0  00010bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000cb8  08000cb8  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08000cb8  08000cb8  00010cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000cc0  08000cc0  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000cc0  08000cc0  00010cc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000cc4  08000cc4  00010cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08000cc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000014  08000cdc  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  08000cdc  00020030  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000a1c  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001c6  00000000  00000000  00020a59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 000002d5  00000000  00000000  00020c1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000078  00000000  00000000  00020ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000006d  00000000  00000000  00020f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000007ec  00000000  00000000  00020fdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000004bc  00000000  00000000  000217c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000012  00000000  00000000  00021c85  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000190  00000000  00000000  00021c98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000038  00000000  00000000  00021e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <SystemInit>:
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
 80001d4:	4b17      	ldr	r3, [pc, #92]	; (8000234 <SystemInit+0x64>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	4a16      	ldr	r2, [pc, #88]	; (8000234 <SystemInit+0x64>)
 80001da:	f043 0301 	orr.w	r3, r3, #1
 80001de:	6013      	str	r3, [r2, #0]
 80001e0:	4b14      	ldr	r3, [pc, #80]	; (8000234 <SystemInit+0x64>)
 80001e2:	685a      	ldr	r2, [r3, #4]
 80001e4:	4913      	ldr	r1, [pc, #76]	; (8000234 <SystemInit+0x64>)
 80001e6:	4b14      	ldr	r3, [pc, #80]	; (8000238 <SystemInit+0x68>)
 80001e8:	4013      	ands	r3, r2
 80001ea:	604b      	str	r3, [r1, #4]
 80001ec:	4b11      	ldr	r3, [pc, #68]	; (8000234 <SystemInit+0x64>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	4a10      	ldr	r2, [pc, #64]	; (8000234 <SystemInit+0x64>)
 80001f2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80001f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80001fa:	6013      	str	r3, [r2, #0]
 80001fc:	4b0d      	ldr	r3, [pc, #52]	; (8000234 <SystemInit+0x64>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a0c      	ldr	r2, [pc, #48]	; (8000234 <SystemInit+0x64>)
 8000202:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000206:	6013      	str	r3, [r2, #0]
 8000208:	4b0a      	ldr	r3, [pc, #40]	; (8000234 <SystemInit+0x64>)
 800020a:	685b      	ldr	r3, [r3, #4]
 800020c:	4a09      	ldr	r2, [pc, #36]	; (8000234 <SystemInit+0x64>)
 800020e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000212:	6053      	str	r3, [r2, #4]
 8000214:	4b07      	ldr	r3, [pc, #28]	; (8000234 <SystemInit+0x64>)
 8000216:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800021a:	609a      	str	r2, [r3, #8]
 800021c:	4b05      	ldr	r3, [pc, #20]	; (8000234 <SystemInit+0x64>)
 800021e:	2200      	movs	r2, #0
 8000220:	62da      	str	r2, [r3, #44]	; 0x2c
 8000222:	f000 f87d 	bl	8000320 <SetSysClock>
 8000226:	4b05      	ldr	r3, [pc, #20]	; (800023c <SystemInit+0x6c>)
 8000228:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800022c:	609a      	str	r2, [r3, #8]
 800022e:	bf00      	nop
 8000230:	bd80      	pop	{r7, pc}
 8000232:	bf00      	nop
 8000234:	40021000 	.word	0x40021000
 8000238:	f8ff0000 	.word	0xf8ff0000
 800023c:	e000ed00 	.word	0xe000ed00

08000240 <SystemCoreClockUpdate>:
 8000240:	b480      	push	{r7}
 8000242:	b085      	sub	sp, #20
 8000244:	af00      	add	r7, sp, #0
 8000246:	2300      	movs	r3, #0
 8000248:	60fb      	str	r3, [r7, #12]
 800024a:	2300      	movs	r3, #0
 800024c:	60bb      	str	r3, [r7, #8]
 800024e:	2300      	movs	r3, #0
 8000250:	607b      	str	r3, [r7, #4]
 8000252:	2300      	movs	r3, #0
 8000254:	603b      	str	r3, [r7, #0]
 8000256:	4b2d      	ldr	r3, [pc, #180]	; (800030c <SystemCoreClockUpdate+0xcc>)
 8000258:	685b      	ldr	r3, [r3, #4]
 800025a:	f003 030c 	and.w	r3, r3, #12
 800025e:	60fb      	str	r3, [r7, #12]
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	2b08      	cmp	r3, #8
 8000264:	d011      	beq.n	800028a <SystemCoreClockUpdate+0x4a>
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	2b08      	cmp	r3, #8
 800026a:	d836      	bhi.n	80002da <SystemCoreClockUpdate+0x9a>
 800026c:	68fb      	ldr	r3, [r7, #12]
 800026e:	2b00      	cmp	r3, #0
 8000270:	d003      	beq.n	800027a <SystemCoreClockUpdate+0x3a>
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	2b04      	cmp	r3, #4
 8000276:	d004      	beq.n	8000282 <SystemCoreClockUpdate+0x42>
 8000278:	e02f      	b.n	80002da <SystemCoreClockUpdate+0x9a>
 800027a:	4b25      	ldr	r3, [pc, #148]	; (8000310 <SystemCoreClockUpdate+0xd0>)
 800027c:	4a25      	ldr	r2, [pc, #148]	; (8000314 <SystemCoreClockUpdate+0xd4>)
 800027e:	601a      	str	r2, [r3, #0]
 8000280:	e02f      	b.n	80002e2 <SystemCoreClockUpdate+0xa2>
 8000282:	4b23      	ldr	r3, [pc, #140]	; (8000310 <SystemCoreClockUpdate+0xd0>)
 8000284:	4a23      	ldr	r2, [pc, #140]	; (8000314 <SystemCoreClockUpdate+0xd4>)
 8000286:	601a      	str	r2, [r3, #0]
 8000288:	e02b      	b.n	80002e2 <SystemCoreClockUpdate+0xa2>
 800028a:	4b20      	ldr	r3, [pc, #128]	; (800030c <SystemCoreClockUpdate+0xcc>)
 800028c:	685b      	ldr	r3, [r3, #4]
 800028e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000292:	60bb      	str	r3, [r7, #8]
 8000294:	4b1d      	ldr	r3, [pc, #116]	; (800030c <SystemCoreClockUpdate+0xcc>)
 8000296:	685b      	ldr	r3, [r3, #4]
 8000298:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800029c:	607b      	str	r3, [r7, #4]
 800029e:	68bb      	ldr	r3, [r7, #8]
 80002a0:	0c9b      	lsrs	r3, r3, #18
 80002a2:	3302      	adds	r3, #2
 80002a4:	60bb      	str	r3, [r7, #8]
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d106      	bne.n	80002ba <SystemCoreClockUpdate+0x7a>
 80002ac:	68bb      	ldr	r3, [r7, #8]
 80002ae:	4a1a      	ldr	r2, [pc, #104]	; (8000318 <SystemCoreClockUpdate+0xd8>)
 80002b0:	fb02 f303 	mul.w	r3, r2, r3
 80002b4:	4a16      	ldr	r2, [pc, #88]	; (8000310 <SystemCoreClockUpdate+0xd0>)
 80002b6:	6013      	str	r3, [r2, #0]
 80002b8:	e013      	b.n	80002e2 <SystemCoreClockUpdate+0xa2>
 80002ba:	4b14      	ldr	r3, [pc, #80]	; (800030c <SystemCoreClockUpdate+0xcc>)
 80002bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002be:	f003 030f 	and.w	r3, r3, #15
 80002c2:	3301      	adds	r3, #1
 80002c4:	603b      	str	r3, [r7, #0]
 80002c6:	4a13      	ldr	r2, [pc, #76]	; (8000314 <SystemCoreClockUpdate+0xd4>)
 80002c8:	683b      	ldr	r3, [r7, #0]
 80002ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80002ce:	68ba      	ldr	r2, [r7, #8]
 80002d0:	fb02 f303 	mul.w	r3, r2, r3
 80002d4:	4a0e      	ldr	r2, [pc, #56]	; (8000310 <SystemCoreClockUpdate+0xd0>)
 80002d6:	6013      	str	r3, [r2, #0]
 80002d8:	e003      	b.n	80002e2 <SystemCoreClockUpdate+0xa2>
 80002da:	4b0d      	ldr	r3, [pc, #52]	; (8000310 <SystemCoreClockUpdate+0xd0>)
 80002dc:	4a0d      	ldr	r2, [pc, #52]	; (8000314 <SystemCoreClockUpdate+0xd4>)
 80002de:	601a      	str	r2, [r3, #0]
 80002e0:	bf00      	nop
 80002e2:	4b0a      	ldr	r3, [pc, #40]	; (800030c <SystemCoreClockUpdate+0xcc>)
 80002e4:	685b      	ldr	r3, [r3, #4]
 80002e6:	091b      	lsrs	r3, r3, #4
 80002e8:	f003 030f 	and.w	r3, r3, #15
 80002ec:	4a0b      	ldr	r2, [pc, #44]	; (800031c <SystemCoreClockUpdate+0xdc>)
 80002ee:	5cd3      	ldrb	r3, [r2, r3]
 80002f0:	b2db      	uxtb	r3, r3
 80002f2:	60fb      	str	r3, [r7, #12]
 80002f4:	4b06      	ldr	r3, [pc, #24]	; (8000310 <SystemCoreClockUpdate+0xd0>)
 80002f6:	681a      	ldr	r2, [r3, #0]
 80002f8:	68fb      	ldr	r3, [r7, #12]
 80002fa:	fa22 f303 	lsr.w	r3, r2, r3
 80002fe:	4a04      	ldr	r2, [pc, #16]	; (8000310 <SystemCoreClockUpdate+0xd0>)
 8000300:	6013      	str	r3, [r2, #0]
 8000302:	bf00      	nop
 8000304:	3714      	adds	r7, #20
 8000306:	46bd      	mov	sp, r7
 8000308:	bc80      	pop	{r7}
 800030a:	4770      	bx	lr
 800030c:	40021000 	.word	0x40021000
 8000310:	20000000 	.word	0x20000000
 8000314:	007a1200 	.word	0x007a1200
 8000318:	003d0900 	.word	0x003d0900
 800031c:	20000004 	.word	0x20000004

08000320 <SetSysClock>:
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
 8000324:	f000 f802 	bl	800032c <SetSysClockTo24>
 8000328:	bf00      	nop
 800032a:	bd80      	pop	{r7, pc}

0800032c <SetSysClockTo24>:
 800032c:	b480      	push	{r7}
 800032e:	b083      	sub	sp, #12
 8000330:	af00      	add	r7, sp, #0
 8000332:	2300      	movs	r3, #0
 8000334:	607b      	str	r3, [r7, #4]
 8000336:	2300      	movs	r3, #0
 8000338:	603b      	str	r3, [r7, #0]
 800033a:	4b30      	ldr	r3, [pc, #192]	; (80003fc <SetSysClockTo24+0xd0>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	4a2f      	ldr	r2, [pc, #188]	; (80003fc <SetSysClockTo24+0xd0>)
 8000340:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000344:	6013      	str	r3, [r2, #0]
 8000346:	4b2d      	ldr	r3, [pc, #180]	; (80003fc <SetSysClockTo24+0xd0>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800034e:	603b      	str	r3, [r7, #0]
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	3301      	adds	r3, #1
 8000354:	607b      	str	r3, [r7, #4]
 8000356:	683b      	ldr	r3, [r7, #0]
 8000358:	2b00      	cmp	r3, #0
 800035a:	d103      	bne.n	8000364 <SetSysClockTo24+0x38>
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000362:	d1f0      	bne.n	8000346 <SetSysClockTo24+0x1a>
 8000364:	4b25      	ldr	r3, [pc, #148]	; (80003fc <SetSysClockTo24+0xd0>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800036c:	2b00      	cmp	r3, #0
 800036e:	d002      	beq.n	8000376 <SetSysClockTo24+0x4a>
 8000370:	2301      	movs	r3, #1
 8000372:	603b      	str	r3, [r7, #0]
 8000374:	e001      	b.n	800037a <SetSysClockTo24+0x4e>
 8000376:	2300      	movs	r3, #0
 8000378:	603b      	str	r3, [r7, #0]
 800037a:	683b      	ldr	r3, [r7, #0]
 800037c:	2b01      	cmp	r3, #1
 800037e:	d137      	bne.n	80003f0 <SetSysClockTo24+0xc4>
 8000380:	4b1e      	ldr	r3, [pc, #120]	; (80003fc <SetSysClockTo24+0xd0>)
 8000382:	4a1e      	ldr	r2, [pc, #120]	; (80003fc <SetSysClockTo24+0xd0>)
 8000384:	685b      	ldr	r3, [r3, #4]
 8000386:	6053      	str	r3, [r2, #4]
 8000388:	4b1c      	ldr	r3, [pc, #112]	; (80003fc <SetSysClockTo24+0xd0>)
 800038a:	4a1c      	ldr	r2, [pc, #112]	; (80003fc <SetSysClockTo24+0xd0>)
 800038c:	685b      	ldr	r3, [r3, #4]
 800038e:	6053      	str	r3, [r2, #4]
 8000390:	4b1a      	ldr	r3, [pc, #104]	; (80003fc <SetSysClockTo24+0xd0>)
 8000392:	4a1a      	ldr	r2, [pc, #104]	; (80003fc <SetSysClockTo24+0xd0>)
 8000394:	685b      	ldr	r3, [r3, #4]
 8000396:	6053      	str	r3, [r2, #4]
 8000398:	4b18      	ldr	r3, [pc, #96]	; (80003fc <SetSysClockTo24+0xd0>)
 800039a:	685b      	ldr	r3, [r3, #4]
 800039c:	4a17      	ldr	r2, [pc, #92]	; (80003fc <SetSysClockTo24+0xd0>)
 800039e:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80003a2:	6053      	str	r3, [r2, #4]
 80003a4:	4b15      	ldr	r3, [pc, #84]	; (80003fc <SetSysClockTo24+0xd0>)
 80003a6:	685b      	ldr	r3, [r3, #4]
 80003a8:	4a14      	ldr	r2, [pc, #80]	; (80003fc <SetSysClockTo24+0xd0>)
 80003aa:	f443 1398 	orr.w	r3, r3, #1245184	; 0x130000
 80003ae:	6053      	str	r3, [r2, #4]
 80003b0:	4b12      	ldr	r3, [pc, #72]	; (80003fc <SetSysClockTo24+0xd0>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4a11      	ldr	r2, [pc, #68]	; (80003fc <SetSysClockTo24+0xd0>)
 80003b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80003ba:	6013      	str	r3, [r2, #0]
 80003bc:	bf00      	nop
 80003be:	4b0f      	ldr	r3, [pc, #60]	; (80003fc <SetSysClockTo24+0xd0>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d0f9      	beq.n	80003be <SetSysClockTo24+0x92>
 80003ca:	4b0c      	ldr	r3, [pc, #48]	; (80003fc <SetSysClockTo24+0xd0>)
 80003cc:	685b      	ldr	r3, [r3, #4]
 80003ce:	4a0b      	ldr	r2, [pc, #44]	; (80003fc <SetSysClockTo24+0xd0>)
 80003d0:	f023 0303 	bic.w	r3, r3, #3
 80003d4:	6053      	str	r3, [r2, #4]
 80003d6:	4b09      	ldr	r3, [pc, #36]	; (80003fc <SetSysClockTo24+0xd0>)
 80003d8:	685b      	ldr	r3, [r3, #4]
 80003da:	4a08      	ldr	r2, [pc, #32]	; (80003fc <SetSysClockTo24+0xd0>)
 80003dc:	f043 0302 	orr.w	r3, r3, #2
 80003e0:	6053      	str	r3, [r2, #4]
 80003e2:	bf00      	nop
 80003e4:	4b05      	ldr	r3, [pc, #20]	; (80003fc <SetSysClockTo24+0xd0>)
 80003e6:	685b      	ldr	r3, [r3, #4]
 80003e8:	f003 030c 	and.w	r3, r3, #12
 80003ec:	2b08      	cmp	r3, #8
 80003ee:	d1f9      	bne.n	80003e4 <SetSysClockTo24+0xb8>
 80003f0:	bf00      	nop
 80003f2:	370c      	adds	r7, #12
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bc80      	pop	{r7}
 80003f8:	4770      	bx	lr
 80003fa:	bf00      	nop
 80003fc:	40021000 	.word	0x40021000

08000400 <__libc_init_array>:
 8000400:	b570      	push	{r4, r5, r6, lr}
 8000402:	4e0d      	ldr	r6, [pc, #52]	; (8000438 <__libc_init_array+0x38>)
 8000404:	4d0d      	ldr	r5, [pc, #52]	; (800043c <__libc_init_array+0x3c>)
 8000406:	1b76      	subs	r6, r6, r5
 8000408:	10b6      	asrs	r6, r6, #2
 800040a:	d006      	beq.n	800041a <__libc_init_array+0x1a>
 800040c:	2400      	movs	r4, #0
 800040e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000412:	3401      	adds	r4, #1
 8000414:	4798      	blx	r3
 8000416:	42a6      	cmp	r6, r4
 8000418:	d1f9      	bne.n	800040e <__libc_init_array+0xe>
 800041a:	4e09      	ldr	r6, [pc, #36]	; (8000440 <__libc_init_array+0x40>)
 800041c:	4d09      	ldr	r5, [pc, #36]	; (8000444 <__libc_init_array+0x44>)
 800041e:	f000 fbbb 	bl	8000b98 <_init>
 8000422:	1b76      	subs	r6, r6, r5
 8000424:	10b6      	asrs	r6, r6, #2
 8000426:	d006      	beq.n	8000436 <__libc_init_array+0x36>
 8000428:	2400      	movs	r4, #0
 800042a:	f855 3b04 	ldr.w	r3, [r5], #4
 800042e:	3401      	adds	r4, #1
 8000430:	4798      	blx	r3
 8000432:	42a6      	cmp	r6, r4
 8000434:	d1f9      	bne.n	800042a <__libc_init_array+0x2a>
 8000436:	bd70      	pop	{r4, r5, r6, pc}
 8000438:	08000cc0 	.word	0x08000cc0
 800043c:	08000cc0 	.word	0x08000cc0
 8000440:	08000cc4 	.word	0x08000cc4
 8000444:	08000cc0 	.word	0x08000cc0

08000448 <memset>:
 8000448:	0783      	lsls	r3, r0, #30
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	d048      	beq.n	80004e0 <memset+0x98>
 800044e:	1e54      	subs	r4, r2, #1
 8000450:	2a00      	cmp	r2, #0
 8000452:	d03f      	beq.n	80004d4 <memset+0x8c>
 8000454:	4603      	mov	r3, r0
 8000456:	b2ca      	uxtb	r2, r1
 8000458:	e001      	b.n	800045e <memset+0x16>
 800045a:	3c01      	subs	r4, #1
 800045c:	d33a      	bcc.n	80004d4 <memset+0x8c>
 800045e:	f803 2b01 	strb.w	r2, [r3], #1
 8000462:	079d      	lsls	r5, r3, #30
 8000464:	d1f9      	bne.n	800045a <memset+0x12>
 8000466:	2c03      	cmp	r4, #3
 8000468:	d92d      	bls.n	80004c6 <memset+0x7e>
 800046a:	b2cd      	uxtb	r5, r1
 800046c:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8000470:	2c0f      	cmp	r4, #15
 8000472:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8000476:	d936      	bls.n	80004e6 <memset+0x9e>
 8000478:	f1a4 0210 	sub.w	r2, r4, #16
 800047c:	f022 0c0f 	bic.w	ip, r2, #15
 8000480:	f103 0e20 	add.w	lr, r3, #32
 8000484:	44e6      	add	lr, ip
 8000486:	ea4f 1c12 	mov.w	ip, r2, lsr #4
 800048a:	f103 0210 	add.w	r2, r3, #16
 800048e:	e942 5504 	strd	r5, r5, [r2, #-16]
 8000492:	e942 5502 	strd	r5, r5, [r2, #-8]
 8000496:	3210      	adds	r2, #16
 8000498:	4572      	cmp	r2, lr
 800049a:	d1f8      	bne.n	800048e <memset+0x46>
 800049c:	f10c 0201 	add.w	r2, ip, #1
 80004a0:	f014 0f0c 	tst.w	r4, #12
 80004a4:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80004a8:	f004 0c0f 	and.w	ip, r4, #15
 80004ac:	d013      	beq.n	80004d6 <memset+0x8e>
 80004ae:	f1ac 0304 	sub.w	r3, ip, #4
 80004b2:	f023 0303 	bic.w	r3, r3, #3
 80004b6:	3304      	adds	r3, #4
 80004b8:	4413      	add	r3, r2
 80004ba:	f842 5b04 	str.w	r5, [r2], #4
 80004be:	4293      	cmp	r3, r2
 80004c0:	d1fb      	bne.n	80004ba <memset+0x72>
 80004c2:	f00c 0403 	and.w	r4, ip, #3
 80004c6:	b12c      	cbz	r4, 80004d4 <memset+0x8c>
 80004c8:	b2ca      	uxtb	r2, r1
 80004ca:	441c      	add	r4, r3
 80004cc:	f803 2b01 	strb.w	r2, [r3], #1
 80004d0:	429c      	cmp	r4, r3
 80004d2:	d1fb      	bne.n	80004cc <memset+0x84>
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	4664      	mov	r4, ip
 80004d8:	4613      	mov	r3, r2
 80004da:	2c00      	cmp	r4, #0
 80004dc:	d1f4      	bne.n	80004c8 <memset+0x80>
 80004de:	e7f9      	b.n	80004d4 <memset+0x8c>
 80004e0:	4603      	mov	r3, r0
 80004e2:	4614      	mov	r4, r2
 80004e4:	e7bf      	b.n	8000466 <memset+0x1e>
 80004e6:	461a      	mov	r2, r3
 80004e8:	46a4      	mov	ip, r4
 80004ea:	e7e0      	b.n	80004ae <memset+0x66>

080004ec <strlen>:
 80004ec:	f020 0103 	bic.w	r1, r0, #3
 80004f0:	f010 0003 	ands.w	r0, r0, #3
 80004f4:	f1c0 0000 	rsb	r0, r0, #0
 80004f8:	f851 3b04 	ldr.w	r3, [r1], #4
 80004fc:	f100 0c04 	add.w	ip, r0, #4
 8000500:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8000504:	f06f 0200 	mvn.w	r2, #0
 8000508:	bf1c      	itt	ne
 800050a:	fa22 f20c 	lsrne.w	r2, r2, ip
 800050e:	4313      	orrne	r3, r2
 8000510:	f04f 0c01 	mov.w	ip, #1
 8000514:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 8000518:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 800051c:	eba3 020c 	sub.w	r2, r3, ip
 8000520:	ea22 0203 	bic.w	r2, r2, r3
 8000524:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 8000528:	bf04      	itt	eq
 800052a:	f851 3b04 	ldreq.w	r3, [r1], #4
 800052e:	3004      	addeq	r0, #4
 8000530:	d0f4      	beq.n	800051c <strlen+0x30>
 8000532:	f1c2 0100 	rsb	r1, r2, #0
 8000536:	ea02 0201 	and.w	r2, r2, r1
 800053a:	fab2 f282 	clz	r2, r2
 800053e:	f1c2 021f 	rsb	r2, r2, #31
 8000542:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 8000546:	4770      	bx	lr

08000548 <strncpy>:
 8000548:	b530      	push	{r4, r5, lr}
 800054a:	ea40 0401 	orr.w	r4, r0, r1
 800054e:	07a3      	lsls	r3, r4, #30
 8000550:	d122      	bne.n	8000598 <strncpy+0x50>
 8000552:	2a03      	cmp	r2, #3
 8000554:	d920      	bls.n	8000598 <strncpy+0x50>
 8000556:	460b      	mov	r3, r1
 8000558:	4684      	mov	ip, r0
 800055a:	4619      	mov	r1, r3
 800055c:	f853 5b04 	ldr.w	r5, [r3], #4
 8000560:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
 8000564:	ea24 0405 	bic.w	r4, r4, r5
 8000568:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 800056c:	d115      	bne.n	800059a <strncpy+0x52>
 800056e:	3a04      	subs	r2, #4
 8000570:	2a03      	cmp	r2, #3
 8000572:	4619      	mov	r1, r3
 8000574:	f84c 5b04 	str.w	r5, [ip], #4
 8000578:	d8ef      	bhi.n	800055a <strncpy+0x12>
 800057a:	f101 3eff 	add.w	lr, r1, #4294967295
 800057e:	b152      	cbz	r2, 8000596 <strncpy+0x4e>
 8000580:	4663      	mov	r3, ip
 8000582:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
 8000586:	1e54      	subs	r4, r2, #1
 8000588:	f803 1b01 	strb.w	r1, [r3], #1
 800058c:	b141      	cbz	r1, 80005a0 <strncpy+0x58>
 800058e:	4622      	mov	r2, r4
 8000590:	469c      	mov	ip, r3
 8000592:	2a00      	cmp	r2, #0
 8000594:	d1f4      	bne.n	8000580 <strncpy+0x38>
 8000596:	bd30      	pop	{r4, r5, pc}
 8000598:	4684      	mov	ip, r0
 800059a:	f101 3eff 	add.w	lr, r1, #4294967295
 800059e:	e7ee      	b.n	800057e <strncpy+0x36>
 80005a0:	4462      	add	r2, ip
 80005a2:	2c00      	cmp	r4, #0
 80005a4:	d0f7      	beq.n	8000596 <strncpy+0x4e>
 80005a6:	f803 1b01 	strb.w	r1, [r3], #1
 80005aa:	4293      	cmp	r3, r2
 80005ac:	d1fb      	bne.n	80005a6 <strncpy+0x5e>
 80005ae:	bd30      	pop	{r4, r5, pc}

080005b0 <__do_global_dtors_aux>:
 80005b0:	b510      	push	{r4, lr}
 80005b2:	4c05      	ldr	r4, [pc, #20]	; (80005c8 <__do_global_dtors_aux+0x18>)
 80005b4:	7823      	ldrb	r3, [r4, #0]
 80005b6:	b933      	cbnz	r3, 80005c6 <__do_global_dtors_aux+0x16>
 80005b8:	4b04      	ldr	r3, [pc, #16]	; (80005cc <__do_global_dtors_aux+0x1c>)
 80005ba:	b113      	cbz	r3, 80005c2 <__do_global_dtors_aux+0x12>
 80005bc:	4804      	ldr	r0, [pc, #16]	; (80005d0 <__do_global_dtors_aux+0x20>)
 80005be:	f3af 8000 	nop.w
 80005c2:	2301      	movs	r3, #1
 80005c4:	7023      	strb	r3, [r4, #0]
 80005c6:	bd10      	pop	{r4, pc}
 80005c8:	20000014 	.word	0x20000014
 80005cc:	00000000 	.word	0x00000000
 80005d0:	08000b98 	.word	0x08000b98

080005d4 <frame_dummy>:
 80005d4:	b508      	push	{r3, lr}
 80005d6:	4b03      	ldr	r3, [pc, #12]	; (80005e4 <frame_dummy+0x10>)
 80005d8:	b11b      	cbz	r3, 80005e2 <frame_dummy+0xe>
 80005da:	4903      	ldr	r1, [pc, #12]	; (80005e8 <frame_dummy+0x14>)
 80005dc:	4803      	ldr	r0, [pc, #12]	; (80005ec <frame_dummy+0x18>)
 80005de:	f3af 8000 	nop.w
 80005e2:	bd08      	pop	{r3, pc}
 80005e4:	00000000 	.word	0x00000000
 80005e8:	20000018 	.word	0x20000018
 80005ec:	08000b98 	.word	0x08000b98

080005f0 <_Z15UART_sendstringPKc>:
#include "drivers\CMSIS\DeviceSupport\ST\STM32F10x\stm32f10x.h"

#define BUFFER_SIZE 4

void UART_sendstring(const char *str) {
    while (*str) {
 80005f0:	7801      	ldrb	r1, [r0, #0]
 80005f2:	b149      	cbz	r1, 8000608 <_Z15UART_sendstringPKc+0x18>
        while (!(USART1->SR & USART_SR_TXE));
 80005f4:	4a05      	ldr	r2, [pc, #20]	; (800060c <_Z15UART_sendstringPKc+0x1c>)
 80005f6:	8813      	ldrh	r3, [r2, #0]
 80005f8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80005fc:	d0fb      	beq.n	80005f6 <_Z15UART_sendstringPKc+0x6>
        USART1->DR = *str++;
 80005fe:	8091      	strh	r1, [r2, #4]
    while (*str) {
 8000600:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 8000604:	2900      	cmp	r1, #0
 8000606:	d1f6      	bne.n	80005f6 <_Z15UART_sendstringPKc+0x6>
    }
}
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	40013800 	.word	0x40013800

08000610 <_Z20brightness_message_bPKc>:

void brightness_message_b(const char buffer[]) {
 8000610:	b510      	push	{r4, lr}
 8000612:	b090      	sub	sp, #64	; 0x40
 8000614:	4686      	mov	lr, r0
    char message[60] = "\r\nThe brightness of the blue LED is set to ";
 8000616:	f10d 0c04 	add.w	ip, sp, #4
 800061a:	4c14      	ldr	r4, [pc, #80]	; (800066c <_Z20brightness_message_bPKc+0x5c>)
 800061c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800061e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000622:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000624:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000628:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800062c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8000630:	2300      	movs	r3, #0
 8000632:	930d      	str	r3, [sp, #52]	; 0x34
 8000634:	930e      	str	r3, [sp, #56]	; 0x38
 8000636:	930f      	str	r3, [sp, #60]	; 0x3c

    message[43] = buffer[1];
 8000638:	f89e 3001 	ldrb.w	r3, [lr, #1]
 800063c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    message[44] = buffer[2];
 8000640:	f89e 3002 	ldrb.w	r3, [lr, #2]
 8000644:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
    message[45] = ' ';
 8000648:	2320      	movs	r3, #32
 800064a:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    message[46] = '%';
 800064e:	2325      	movs	r3, #37	; 0x25
 8000650:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    message[47] = '\r'; 
 8000654:	230d      	movs	r3, #13
 8000656:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    message[48] = '\n';
 800065a:	230a      	movs	r3, #10
 800065c:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    message[49] = '\0';

    UART_sendstring(message);
 8000660:	a801      	add	r0, sp, #4
 8000662:	f7ff ffc5 	bl	80005f0 <_Z15UART_sendstringPKc>
}
 8000666:	b010      	add	sp, #64	; 0x40
 8000668:	bd10      	pop	{r4, pc}
 800066a:	bf00      	nop
 800066c:	08000bb0 	.word	0x08000bb0

08000670 <_Z20brightness_message_gPKc>:

void brightness_message_g(const char buffer[]) {
 8000670:	b510      	push	{r4, lr}
 8000672:	b090      	sub	sp, #64	; 0x40
 8000674:	4686      	mov	lr, r0
    char message[60] = "\r\nThe brightness of the green LED is set to ";
 8000676:	f10d 0c04 	add.w	ip, sp, #4
 800067a:	4c16      	ldr	r4, [pc, #88]	; (80006d4 <_Z20brightness_message_gPKc+0x64>)
 800067c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800067e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000682:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000684:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000688:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800068c:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 8000690:	f88c 3000 	strb.w	r3, [ip]
 8000694:	2300      	movs	r3, #0
 8000696:	f8cd 3035 	str.w	r3, [sp, #53]	; 0x35
 800069a:	f8cd 3039 	str.w	r3, [sp, #57]	; 0x39
 800069e:	930f      	str	r3, [sp, #60]	; 0x3c

    message[44] = buffer[1];
 80006a0:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80006a4:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
    message[45] = buffer[2];
 80006a8:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80006ac:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    message[46] = ' ';
 80006b0:	2320      	movs	r3, #32
 80006b2:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    message[47] = '%';
 80006b6:	2325      	movs	r3, #37	; 0x25
 80006b8:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    message[48] = '\r';
 80006bc:	230d      	movs	r3, #13
 80006be:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    message[49] = '\n';
 80006c2:	230a      	movs	r3, #10
 80006c4:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
    message[50] = '\0';


    UART_sendstring(message);
 80006c8:	a801      	add	r0, sp, #4
 80006ca:	f7ff ff91 	bl	80005f0 <_Z15UART_sendstringPKc>
}
 80006ce:	b010      	add	sp, #64	; 0x40
 80006d0:	bd10      	pop	{r4, pc}
 80006d2:	bf00      	nop
 80006d4:	08000bec 	.word	0x08000bec

080006d8 <_Z21brightness_message_bgPKc>:

void brightness_message_bg(const char buffer[]) {
 80006d8:	b510      	push	{r4, lr}
 80006da:	b090      	sub	sp, #64	; 0x40
 80006dc:	4686      	mov	lr, r0
    char message[60] = "\r\nThe brightness of both LEDs is set to ";
 80006de:	f10d 0c04 	add.w	ip, sp, #4
 80006e2:	4c17      	ldr	r4, [pc, #92]	; (8000740 <_Z21brightness_message_bgPKc+0x68>)
 80006e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006e6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80006ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006ec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80006f0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80006f4:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80006f8:	f88c 2000 	strb.w	r2, [ip]
 80006fc:	2300      	movs	r3, #0
 80006fe:	f8cd 3031 	str.w	r3, [sp, #49]	; 0x31
 8000702:	f8cd 3035 	str.w	r3, [sp, #53]	; 0x35
 8000706:	f8cd 3039 	str.w	r3, [sp, #57]	; 0x39
 800070a:	930f      	str	r3, [sp, #60]	; 0x3c

    message[40] = buffer[2];
 800070c:	f89e 3002 	ldrb.w	r3, [lr, #2]
 8000710:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    message[41] = buffer[3];
 8000714:	f89e 3003 	ldrb.w	r3, [lr, #3]
 8000718:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
    message[42] = ' ';
 800071c:	2320      	movs	r3, #32
 800071e:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    message[43] = '%';
 8000722:	2325      	movs	r3, #37	; 0x25
 8000724:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    message[44] = '\r';
 8000728:	230d      	movs	r3, #13
 800072a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
    message[45] = '\n';
 800072e:	230a      	movs	r3, #10
 8000730:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    message[46] = '\0';

    UART_sendstring(message);
 8000734:	a801      	add	r0, sp, #4
 8000736:	f7ff ff5b 	bl	80005f0 <_Z15UART_sendstringPKc>
}
 800073a:	b010      	add	sp, #64	; 0x40
 800073c:	bd10      	pop	{r4, pc}
 800073e:	bf00      	nop
 8000740:	08000c28 	.word	0x08000c28

08000744 <_Z23invalid_command_messagePKc>:

void invalid_command_message(const char buffer[]) {
 8000744:	b530      	push	{r4, r5, lr}
 8000746:	b091      	sub	sp, #68	; 0x44
 8000748:	4604      	mov	r4, r0
    char message[60] = "\r\nInvalid command ";
 800074a:	4d1f      	ldr	r5, [pc, #124]	; (80007c8 <_Z23invalid_command_messagePKc+0x84>)
 800074c:	f10d 0c04 	add.w	ip, sp, #4
 8000750:	6828      	ldr	r0, [r5, #0]
 8000752:	6869      	ldr	r1, [r5, #4]
 8000754:	68aa      	ldr	r2, [r5, #8]
 8000756:	68eb      	ldr	r3, [r5, #12]
 8000758:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800075c:	8a2a      	ldrh	r2, [r5, #16]
 800075e:	7cab      	ldrb	r3, [r5, #18]
 8000760:	f8ac 2000 	strh.w	r2, [ip]
 8000764:	f88c 3002 	strb.w	r3, [ip, #2]
 8000768:	2229      	movs	r2, #41	; 0x29
 800076a:	2100      	movs	r1, #0
 800076c:	f10d 0017 	add.w	r0, sp, #23
 8000770:	f7ff fe6a 	bl	8000448 <memset>
    uint8_t index = 18;

    for (int i = 0; i < 4; i++) {
 8000774:	1e62      	subs	r2, r4, #1
 8000776:	1ce0      	adds	r0, r4, #3
    uint8_t index = 18;
 8000778:	2312      	movs	r3, #18
 800077a:	e001      	b.n	8000780 <_Z23invalid_command_messagePKc+0x3c>
    for (int i = 0; i < 4; i++) {
 800077c:	4282      	cmp	r2, r0
 800077e:	d00a      	beq.n	8000796 <_Z23invalid_command_messagePKc+0x52>
        if (buffer[i] != '\0') {
 8000780:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8000784:	2900      	cmp	r1, #0
 8000786:	d0f9      	beq.n	800077c <_Z23invalid_command_messagePKc+0x38>
            message[index++] = buffer[i];
 8000788:	1c5c      	adds	r4, r3, #1
 800078a:	3340      	adds	r3, #64	; 0x40
 800078c:	446b      	add	r3, sp
 800078e:	f803 1c3c 	strb.w	r1, [r3, #-60]
 8000792:	b2e3      	uxtb	r3, r4
 8000794:	e7f2      	b.n	800077c <_Z23invalid_command_messagePKc+0x38>
        }
    }

    message[index++] = '\r';
 8000796:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800079a:	446a      	add	r2, sp
 800079c:	210d      	movs	r1, #13
 800079e:	f802 1c3c 	strb.w	r1, [r2, #-60]
 80007a2:	1c5a      	adds	r2, r3, #1
    message[index++] = '\n';
 80007a4:	b2d2      	uxtb	r2, r2
 80007a6:	3240      	adds	r2, #64	; 0x40
 80007a8:	446a      	add	r2, sp
 80007aa:	210a      	movs	r1, #10
 80007ac:	f802 1c3c 	strb.w	r1, [r2, #-60]
 80007b0:	3302      	adds	r3, #2
    message[index] = '\0';
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	3340      	adds	r3, #64	; 0x40
 80007b6:	446b      	add	r3, sp
 80007b8:	2200      	movs	r2, #0
 80007ba:	f803 2c3c 	strb.w	r2, [r3, #-60]

    UART_sendstring(message);
 80007be:	a801      	add	r0, sp, #4
 80007c0:	f7ff ff16 	bl	80005f0 <_Z15UART_sendstringPKc>
}
 80007c4:	b011      	add	sp, #68	; 0x44
 80007c6:	bd30      	pop	{r4, r5, pc}
 80007c8:	08000c64 	.word	0x08000c64

080007cc <_Z12info_messagehh>:

void info_message(const uint8_t b, const uint8_t g) {
 80007cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80007d0:	b090      	sub	sp, #64	; 0x40
 80007d2:	4606      	mov	r6, r0
 80007d4:	460d      	mov	r5, r1
    char message[60];
    strcpy(message, "\r\nBrightness of blue LED - ");
 80007d6:	f10d 0c04 	add.w	ip, sp, #4
 80007da:	4c28      	ldr	r4, [pc, #160]	; (800087c <_Z12info_messagehh+0xb0>)
 80007dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007de:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80007e2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80007e6:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80007ea:	f82c 2b02 	strh.w	r2, [ip], #2
 80007ee:	0c12      	lsrs	r2, r2, #16
 80007f0:	f88c 2000 	strb.w	r2, [ip]
    uint8_t index = 27;
    
    message[index++] = '0' + (b / 10);
 80007f4:	4c22      	ldr	r4, [pc, #136]	; (8000880 <_Z12info_messagehh+0xb4>)
 80007f6:	fba4 2306 	umull	r2, r3, r4, r6
 80007fa:	08db      	lsrs	r3, r3, #3
 80007fc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8000800:	f88d 201f 	strb.w	r2, [sp, #31]
    message[index++] = '0' + (b % 10);
 8000804:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000808:	eba6 0643 	sub.w	r6, r6, r3, lsl #1
 800080c:	3630      	adds	r6, #48	; 0x30
 800080e:	f88d 6020 	strb.w	r6, [sp, #32]
    message[index++] = '\r';
 8000812:	f04f 080d 	mov.w	r8, #13
 8000816:	f88d 8021 	strb.w	r8, [sp, #33]	; 0x21
    message[index++] = '\n';
 800081a:	270a      	movs	r7, #10
 800081c:	f88d 7022 	strb.w	r7, [sp, #34]	; 0x22
    message[index] = '\0';
 8000820:	2600      	movs	r6, #0
 8000822:	f88d 6023 	strb.w	r6, [sp, #35]	; 0x23

    UART_sendstring(message);
 8000826:	a801      	add	r0, sp, #4
 8000828:	f7ff fee2 	bl	80005f0 <_Z15UART_sendstringPKc>

    strcpy(message, "Brightness of green LED - ");
 800082c:	f10d 0c04 	add.w	ip, sp, #4
 8000830:	f8df e050 	ldr.w	lr, [pc, #80]	; 8000884 <_Z12info_messagehh+0xb8>
 8000834:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8000838:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800083c:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8000840:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8000844:	f8ac 2000 	strh.w	r2, [ip]
    index = 26;
    
    message[index++] = '0' + (g / 10);
 8000848:	fba4 2305 	umull	r2, r3, r4, r5
 800084c:	08db      	lsrs	r3, r3, #3
 800084e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8000852:	f88d 201e 	strb.w	r2, [sp, #30]
    message[index++] = '0' + (g % 10);
 8000856:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800085a:	eba5 0543 	sub.w	r5, r5, r3, lsl #1
 800085e:	3530      	adds	r5, #48	; 0x30
 8000860:	f88d 501f 	strb.w	r5, [sp, #31]
    message[index++] = '\r';
 8000864:	f88d 8020 	strb.w	r8, [sp, #32]
    message[index++] = '\n';
 8000868:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
    message[index] = '\0';
 800086c:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22

    UART_sendstring(message);
 8000870:	a801      	add	r0, sp, #4
 8000872:	f7ff febd 	bl	80005f0 <_Z15UART_sendstringPKc>
}
 8000876:	b010      	add	sp, #64	; 0x40
 8000878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800087c:	08000c78 	.word	0x08000c78
 8000880:	cccccccd 	.word	0xcccccccd
 8000884:	08000c94 	.word	0x08000c94

08000888 <main>:

int main() {
 8000888:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800088c:	b083      	sub	sp, #12
    //------------------UART----------------
    // Включаем тактирование для USART1 и GPIOA
    RCC->APB2ENR |= RCC_APB2ENR_USART1EN;  // USART1
 800088e:	4aa8      	ldr	r2, [pc, #672]	; (8000b30 <main+0x2a8>)
 8000890:	6993      	ldr	r3, [r2, #24]
 8000892:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000896:	6193      	str	r3, [r2, #24]
    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;    // GPIOA
 8000898:	6993      	ldr	r3, [r2, #24]
 800089a:	f043 0304 	orr.w	r3, r3, #4
 800089e:	6193      	str	r3, [r2, #24]

    // Настройка GPIO для USART1 Tx (PA9) и Rx (PA10) 
    GPIOA->CRH &= ~GPIO_CRH_CNF9;
 80008a0:	4ba4      	ldr	r3, [pc, #656]	; (8000b34 <main+0x2ac>)
 80008a2:	6859      	ldr	r1, [r3, #4]
 80008a4:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 80008a8:	6059      	str	r1, [r3, #4]
    GPIOA->CRH |= GPIO_CRH_CNF9_1 | GPIO_CRH_MODE9;
 80008aa:	6859      	ldr	r1, [r3, #4]
 80008ac:	f041 01b0 	orr.w	r1, r1, #176	; 0xb0
 80008b0:	6059      	str	r1, [r3, #4]

    GPIOA->CRH &= ~GPIO_CRH_CNF10;
 80008b2:	6859      	ldr	r1, [r3, #4]
 80008b4:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 80008b8:	6059      	str	r1, [r3, #4]
    GPIOA->CRH |= GPIO_CRH_CNF10_1;
 80008ba:	6859      	ldr	r1, [r3, #4]
 80008bc:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80008c0:	6059      	str	r1, [r3, #4]
    GPIOA->BSRR |= GPIO_BSRR_BS10;
 80008c2:	6919      	ldr	r1, [r3, #16]
 80008c4:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 80008c8:	6119      	str	r1, [r3, #16]

    // Настройка USART1
    USART1->BRR = 2500; //9600 = 24МГц/(16*2500)
 80008ca:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80008ce:	f640 11c4 	movw	r1, #2500	; 0x9c4
 80008d2:	8119      	strh	r1, [r3, #8]
    USART1->CR1 = USART_CR1_UE | USART_CR1_TE | USART_CR1_RE; 
 80008d4:	f242 010c 	movw	r1, #8204	; 0x200c
 80008d8:	8199      	strh	r1, [r3, #12]
    //--------------------GPIO--------------
    RCC->APB2ENR |= RCC_APB2ENR_IOPCEN; // Включаем тактирование для GPIOC
 80008da:	6993      	ldr	r3, [r2, #24]
 80008dc:	f043 0310 	orr.w	r3, r3, #16
 80008e0:	6193      	str	r3, [r2, #24]
    GPIOC->CRH |= GPIO_CRH_MODE8;       // Настройка PC8 в режим выхода на 50 MHz
 80008e2:	4b95      	ldr	r3, [pc, #596]	; (8000b38 <main+0x2b0>)
 80008e4:	6859      	ldr	r1, [r3, #4]
 80008e6:	f041 0103 	orr.w	r1, r1, #3
 80008ea:	6059      	str	r1, [r3, #4]
    GPIOC->CRH &= ~GPIO_CRH_CNF8;       // Сброс битов конфигурации
 80008ec:	6859      	ldr	r1, [r3, #4]
 80008ee:	f021 010c 	bic.w	r1, r1, #12
 80008f2:	6059      	str	r1, [r3, #4]
    GPIOC->CRH |= GPIO_CRH_CNF8_1;      // Альтернативная функция push-pull
 80008f4:	6859      	ldr	r1, [r3, #4]
 80008f6:	f041 0108 	orr.w	r1, r1, #8
 80008fa:	6059      	str	r1, [r3, #4]

    GPIOC->CRH |= GPIO_CRH_MODE9;       // Настройка PC9 в режим выхода на 50 MHz
 80008fc:	6859      	ldr	r1, [r3, #4]
 80008fe:	f041 0130 	orr.w	r1, r1, #48	; 0x30
 8000902:	6059      	str	r1, [r3, #4]
    GPIOC->CRH &= ~GPIO_CRH_CNF9;       // Сброс битов конфигурации
 8000904:	6859      	ldr	r1, [r3, #4]
 8000906:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 800090a:	6059      	str	r1, [r3, #4]
    GPIOC->CRH |= GPIO_CRH_CNF9_1;      // Альтернативная функция push-pull
 800090c:	6859      	ldr	r1, [r3, #4]
 800090e:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8000912:	6059      	str	r1, [r3, #4]

    //---------------------таймер------------
    RCC->APB1ENR |= RCC_APB1ENR_TIM3EN; // Включаем тактирование для TIM3
 8000914:	69d3      	ldr	r3, [r2, #28]
 8000916:	f043 0302 	orr.w	r3, r3, #2
 800091a:	61d3      	str	r3, [r2, #28]
    RCC->APB2ENR |= RCC_APB2ENR_AFIOEN; // Включаем тактирование для AFIO
 800091c:	6993      	ldr	r3, [r2, #24]
 800091e:	f043 0301 	orr.w	r3, r3, #1
 8000922:	6193      	str	r3, [r2, #24]
    AFIO->MAPR |= AFIO_MAPR_TIM3_REMAP; // Переназначаем пины для TIM3
 8000924:	f5a2 3288 	sub.w	r2, r2, #69632	; 0x11000
 8000928:	6853      	ldr	r3, [r2, #4]
 800092a:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 800092e:	6053      	str	r3, [r2, #4]

    TIM3->PSC = 240;  // Предделитель
 8000930:	4b82      	ldr	r3, [pc, #520]	; (8000b3c <main+0x2b4>)
 8000932:	22f0      	movs	r2, #240	; 0xf0
 8000934:	851a      	strh	r2, [r3, #40]	; 0x28
    TIM3->ARR = 100;  // Автоматическая перезагрузка
 8000936:	2264      	movs	r2, #100	; 0x64
 8000938:	859a      	strh	r2, [r3, #44]	; 0x2c

    // Выбор режима ШИМ для канала 3
    TIM3->CCMR2 |= TIM_CCMR2_OC3M_1 | TIM_CCMR2_OC3M_2;
 800093a:	8b9a      	ldrh	r2, [r3, #28]
 800093c:	b292      	uxth	r2, r2
 800093e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8000942:	839a      	strh	r2, [r3, #28]
    TIM3->CCMR2 |= TIM_CCMR2_OC4M_1 | TIM_CCMR2_OC4M_2;
 8000944:	8b9a      	ldrh	r2, [r3, #28]
 8000946:	b292      	uxth	r2, r2
 8000948:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 800094c:	839a      	strh	r2, [r3, #28]

    // Разрешение события сравнения для канала 3 и 4
    TIM3->CCER |= TIM_CCER_CC3E;
 800094e:	8c1a      	ldrh	r2, [r3, #32]
 8000950:	b292      	uxth	r2, r2
 8000952:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000956:	841a      	strh	r2, [r3, #32]
    TIM3->CCER |= TIM_CCER_CC4E;
 8000958:	8c1a      	ldrh	r2, [r3, #32]
 800095a:	b292      	uxth	r2, r2
 800095c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000960:	841a      	strh	r2, [r3, #32]

    // Предзагрузка
    TIM3->CR1 |= TIM_CR1_ARPE;
 8000962:	881a      	ldrh	r2, [r3, #0]
 8000964:	b292      	uxth	r2, r2
 8000966:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800096a:	801a      	strh	r2, [r3, #0]

    // Включение таймера
    TIM3->CR1 |= TIM_CR1_CEN;
 800096c:	881a      	ldrh	r2, [r3, #0]
 800096e:	b292      	uxth	r2, r2
 8000970:	f042 0201 	orr.w	r2, r2, #1
 8000974:	801a      	strh	r2, [r3, #0]
    //--------------------------------------------------

    char buffer[BUFFER_SIZE] = {0}; 
 8000976:	2500      	movs	r5, #0
 8000978:	9501      	str	r5, [sp, #4]
    char prev_buffer[BUFFER_SIZE] = {0};
 800097a:	9500      	str	r5, [sp, #0]
    uint8_t buffer_index = 0;
    char received_char;
    uint8_t brightness = 0;
    uint8_t g_brightness = 0;
    uint8_t b_brightness = 0;
 800097c:	46a8      	mov	r8, r5
    uint8_t g_brightness = 0;
 800097e:	462e      	mov	r6, r5

    while (1) {

        if (USART1->SR & USART_SR_RXNE) {
 8000980:	4c6f      	ldr	r4, [pc, #444]	; (8000b40 <main+0x2b8>)

            else if (received_char == ' ') { 
                strncpy(buffer, prev_buffer, BUFFER_SIZE);
                buffer_index = strlen(buffer);

                UART_sendstring("\r");
 8000982:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 8000b44 <main+0x2bc>
                for (int i = 0; i < BUFFER_SIZE; i++) {
                    UART_sendstring(" ");
 8000986:	4f70      	ldr	r7, [pc, #448]	; (8000b48 <main+0x2c0>)
 8000988:	e02b      	b.n	80009e2 <main+0x15a>
            else {
                if (buffer_index < 5) {
                    buffer[buffer_index++] = received_char; 
                }
                else {
                    buffer_index = 0; 
 800098a:	2500      	movs	r5, #0
 800098c:	e029      	b.n	80009e2 <main+0x15a>
                buffer[buffer_index] = '\0';
 800098e:	2200      	movs	r2, #0
 8000990:	f105 0308 	add.w	r3, r5, #8
 8000994:	446b      	add	r3, sp
 8000996:	f803 2c04 	strb.w	r2, [r3, #-4]
                if (buffer_index == 3 && buffer[0] == 'b' && buffer[1] >= '0' && buffer[1] <= '9' && buffer[2] >= '0' && buffer[2] <= '9') {
 800099a:	2d03      	cmp	r5, #3
 800099c:	d00c      	beq.n	80009b8 <main+0x130>
                else if (buffer_index == 4 && ((buffer[0] == 'g' && buffer[1] == 'b') || (buffer[0] == 'b' && buffer[1] == 'g')) 
 800099e:	2d04      	cmp	r5, #4
 80009a0:	d112      	bne.n	80009c8 <main+0x140>
 80009a2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80009a6:	2b67      	cmp	r3, #103	; 0x67
 80009a8:	d06e      	beq.n	8000a88 <main+0x200>
 80009aa:	2b62      	cmp	r3, #98	; 0x62
 80009ac:	d10c      	bne.n	80009c8 <main+0x140>
 80009ae:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80009b2:	2b67      	cmp	r3, #103	; 0x67
 80009b4:	d108      	bne.n	80009c8 <main+0x140>
 80009b6:	e06b      	b.n	8000a90 <main+0x208>
                if (buffer_index == 3 && buffer[0] == 'b' && buffer[1] >= '0' && buffer[1] <= '9' && buffer[2] >= '0' && buffer[2] <= '9') {
 80009b8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80009bc:	2b62      	cmp	r3, #98	; 0x62
 80009be:	d032      	beq.n	8000a26 <main+0x19e>
                else if (buffer_index == 3 && buffer[0] == 'g' && buffer[1] >= '0' && buffer[1] <= '9' && buffer[2] >= '0' && buffer[2] <= '9') {
 80009c0:	2b67      	cmp	r3, #103	; 0x67
 80009c2:	d049      	beq.n	8000a58 <main+0x1d0>
                else if (buffer_index == 3 && buffer[0] == 'i' && buffer[1] == 'n' && buffer[2] == 'f') {
 80009c4:	2b69      	cmp	r3, #105	; 0x69
 80009c6:	d07d      	beq.n	8000ac4 <main+0x23c>
                    invalid_command_message(buffer);
 80009c8:	a801      	add	r0, sp, #4
 80009ca:	f7ff febb 	bl	8000744 <_Z23invalid_command_messagePKc>
                strncpy(prev_buffer, buffer, BUFFER_SIZE);
 80009ce:	2204      	movs	r2, #4
 80009d0:	eb0d 0102 	add.w	r1, sp, r2
 80009d4:	4668      	mov	r0, sp
 80009d6:	f7ff fdb7 	bl	8000548 <strncpy>
                memset(buffer, ' ', sizeof(buffer));
 80009da:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
 80009de:	9301      	str	r3, [sp, #4]
                buffer_index = 0; 
 80009e0:	2500      	movs	r5, #0
        if (USART1->SR & USART_SR_RXNE) {
 80009e2:	8823      	ldrh	r3, [r4, #0]
 80009e4:	f013 0f20 	tst.w	r3, #32
 80009e8:	d0fb      	beq.n	80009e2 <main+0x15a>
            received_char = USART1->DR;
 80009ea:	88a2      	ldrh	r2, [r4, #4]
 80009ec:	b291      	uxth	r1, r2
 80009ee:	b2d2      	uxtb	r2, r2
            while (!(USART1->SR & USART_SR_TXE));
 80009f0:	8823      	ldrh	r3, [r4, #0]
 80009f2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80009f6:	d0fb      	beq.n	80009f0 <main+0x168>
            USART1->DR = received_char;
 80009f8:	b2cb      	uxtb	r3, r1
 80009fa:	80a3      	strh	r3, [r4, #4]
            if (received_char == '\r' || received_char == '\n') {
 80009fc:	2a0d      	cmp	r2, #13
 80009fe:	d0c6      	beq.n	800098e <main+0x106>
 8000a00:	2a0a      	cmp	r2, #10
 8000a02:	d0c4      	beq.n	800098e <main+0x106>
            else if (received_char == 127 || received_char == '\b') { //стирание символа
 8000a04:	2a7f      	cmp	r2, #127	; 0x7f
 8000a06:	d06c      	beq.n	8000ae2 <main+0x25a>
 8000a08:	2a08      	cmp	r2, #8
 8000a0a:	d06a      	beq.n	8000ae2 <main+0x25a>
            else if (received_char == ' ') { 
 8000a0c:	2a20      	cmp	r2, #32
 8000a0e:	d06e      	beq.n	8000aee <main+0x266>
                if (buffer_index < 5) {
 8000a10:	2d04      	cmp	r5, #4
 8000a12:	d8ba      	bhi.n	800098a <main+0x102>
                    buffer[buffer_index++] = received_char; 
 8000a14:	1c6b      	adds	r3, r5, #1
 8000a16:	f105 0108 	add.w	r1, r5, #8
 8000a1a:	eb0d 0501 	add.w	r5, sp, r1
 8000a1e:	f805 2c04 	strb.w	r2, [r5, #-4]
 8000a22:	b2dd      	uxtb	r5, r3
 8000a24:	e7dd      	b.n	80009e2 <main+0x15a>
                if (buffer_index == 3 && buffer[0] == 'b' && buffer[1] >= '0' && buffer[1] <= '9' && buffer[2] >= '0' && buffer[2] <= '9') {
 8000a26:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8000a2a:	3b30      	subs	r3, #48	; 0x30
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	2b09      	cmp	r3, #9
 8000a30:	d8ca      	bhi.n	80009c8 <main+0x140>
 8000a32:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8000a36:	3a30      	subs	r2, #48	; 0x30
 8000a38:	b2d2      	uxtb	r2, r2
 8000a3a:	2a09      	cmp	r2, #9
 8000a3c:	d8c4      	bhi.n	80009c8 <main+0x140>
                    brightness = ((buffer[1] - '0') << 3) + ((buffer[1] - '0') << 1) + (buffer[2] - '0');
 8000a3e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000a42:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8000a46:	fa5f f882 	uxtb.w	r8, r2
                    TIM3->CCR3 = brightness; //голубой
 8000a4a:	4b3c      	ldr	r3, [pc, #240]	; (8000b3c <main+0x2b4>)
 8000a4c:	f8a3 803c 	strh.w	r8, [r3, #60]	; 0x3c
                    brightness_message_b(buffer);
 8000a50:	a801      	add	r0, sp, #4
 8000a52:	f7ff fddd 	bl	8000610 <_Z20brightness_message_bPKc>
 8000a56:	e7ba      	b.n	80009ce <main+0x146>
                else if (buffer_index == 3 && buffer[0] == 'g' && buffer[1] >= '0' && buffer[1] <= '9' && buffer[2] >= '0' && buffer[2] <= '9') {
 8000a58:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8000a5c:	3b30      	subs	r3, #48	; 0x30
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	2b09      	cmp	r3, #9
 8000a62:	d8b1      	bhi.n	80009c8 <main+0x140>
 8000a64:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8000a68:	3a30      	subs	r2, #48	; 0x30
 8000a6a:	b2d2      	uxtb	r2, r2
 8000a6c:	2a09      	cmp	r2, #9
 8000a6e:	d8ab      	bhi.n	80009c8 <main+0x140>
                    brightness = ((buffer[1] - '0') << 3) + ((buffer[1] - '0') << 1) + (buffer[2] - '0');
 8000a70:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000a74:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8000a78:	b2d6      	uxtb	r6, r2
                    TIM3->CCR4 = brightness; //зеленый
 8000a7a:	4b30      	ldr	r3, [pc, #192]	; (8000b3c <main+0x2b4>)
 8000a7c:	f8a3 6040 	strh.w	r6, [r3, #64]	; 0x40
                    brightness_message_g(buffer);
 8000a80:	a801      	add	r0, sp, #4
 8000a82:	f7ff fdf5 	bl	8000670 <_Z20brightness_message_gPKc>
 8000a86:	e7a2      	b.n	80009ce <main+0x146>
                else if (buffer_index == 4 && ((buffer[0] == 'g' && buffer[1] == 'b') || (buffer[0] == 'b' && buffer[1] == 'g')) 
 8000a88:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8000a8c:	2b62      	cmp	r3, #98	; 0x62
 8000a8e:	d19b      	bne.n	80009c8 <main+0x140>
                          && buffer[2] >= '0' && buffer[2] <= '9' && buffer[3] >= '0' && buffer[3] <= '9') {
 8000a90:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8000a94:	3b30      	subs	r3, #48	; 0x30
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	2b09      	cmp	r3, #9
 8000a9a:	d895      	bhi.n	80009c8 <main+0x140>
 8000a9c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8000aa0:	3a30      	subs	r2, #48	; 0x30
 8000aa2:	b2d2      	uxtb	r2, r2
 8000aa4:	2a09      	cmp	r2, #9
 8000aa6:	d88f      	bhi.n	80009c8 <main+0x140>
                    brightness = ((buffer[2] - '0') << 3) + ((buffer[2] - '0') << 1) + (buffer[3] - '0');
 8000aa8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000aac:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8000ab0:	b2d6      	uxtb	r6, r2
                    TIM3->CCR3 = brightness;
 8000ab2:	4b22      	ldr	r3, [pc, #136]	; (8000b3c <main+0x2b4>)
 8000ab4:	879e      	strh	r6, [r3, #60]	; 0x3c
                    TIM3->CCR4 = brightness;
 8000ab6:	f8a3 6040 	strh.w	r6, [r3, #64]	; 0x40
                    brightness_message_bg(buffer);
 8000aba:	a801      	add	r0, sp, #4
 8000abc:	f7ff fe0c 	bl	80006d8 <_Z21brightness_message_bgPKc>
                    b_brightness = brightness;
 8000ac0:	46b0      	mov	r8, r6
                    brightness_message_bg(buffer);
 8000ac2:	e784      	b.n	80009ce <main+0x146>
                else if (buffer_index == 3 && buffer[0] == 'i' && buffer[1] == 'n' && buffer[2] == 'f') {
 8000ac4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8000ac8:	2b6e      	cmp	r3, #110	; 0x6e
 8000aca:	f47f af7d 	bne.w	80009c8 <main+0x140>
 8000ace:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8000ad2:	2b66      	cmp	r3, #102	; 0x66
 8000ad4:	f47f af78 	bne.w	80009c8 <main+0x140>
                    info_message(g_brightness, b_brightness);
 8000ad8:	4641      	mov	r1, r8
 8000ada:	4630      	mov	r0, r6
 8000adc:	f7ff fe76 	bl	80007cc <_Z12info_messagehh>
 8000ae0:	e775      	b.n	80009ce <main+0x146>
                if (buffer_index > 0) {
 8000ae2:	2d00      	cmp	r5, #0
 8000ae4:	f43f af7d 	beq.w	80009e2 <main+0x15a>
                    buffer_index--;
 8000ae8:	3d01      	subs	r5, #1
 8000aea:	b2ed      	uxtb	r5, r5
 8000aec:	e779      	b.n	80009e2 <main+0x15a>
                strncpy(buffer, prev_buffer, BUFFER_SIZE);
 8000aee:	2204      	movs	r2, #4
 8000af0:	4669      	mov	r1, sp
 8000af2:	eb0d 0002 	add.w	r0, sp, r2
 8000af6:	f7ff fd27 	bl	8000548 <strncpy>
                buffer_index = strlen(buffer);
 8000afa:	a801      	add	r0, sp, #4
 8000afc:	f7ff fcf6 	bl	80004ec <strlen>
 8000b00:	b2c5      	uxtb	r5, r0
                UART_sendstring("\r");
 8000b02:	4648      	mov	r0, r9
 8000b04:	f7ff fd74 	bl	80005f0 <_Z15UART_sendstringPKc>
                    UART_sendstring(" ");
 8000b08:	4638      	mov	r0, r7
 8000b0a:	f7ff fd71 	bl	80005f0 <_Z15UART_sendstringPKc>
 8000b0e:	4638      	mov	r0, r7
 8000b10:	f7ff fd6e 	bl	80005f0 <_Z15UART_sendstringPKc>
 8000b14:	4638      	mov	r0, r7
 8000b16:	f7ff fd6b 	bl	80005f0 <_Z15UART_sendstringPKc>
 8000b1a:	4638      	mov	r0, r7
 8000b1c:	f7ff fd68 	bl	80005f0 <_Z15UART_sendstringPKc>
                UART_sendstring("\r");
 8000b20:	4648      	mov	r0, r9
 8000b22:	f7ff fd65 	bl	80005f0 <_Z15UART_sendstringPKc>
                UART_sendstring(buffer);
 8000b26:	a801      	add	r0, sp, #4
 8000b28:	f7ff fd62 	bl	80005f0 <_Z15UART_sendstringPKc>
 8000b2c:	e759      	b.n	80009e2 <main+0x15a>
 8000b2e:	bf00      	nop
 8000b30:	40021000 	.word	0x40021000
 8000b34:	40010800 	.word	0x40010800
 8000b38:	40011000 	.word	0x40011000
 8000b3c:	40000400 	.word	0x40000400
 8000b40:	40013800 	.word	0x40013800
 8000b44:	08000cb0 	.word	0x08000cb0
 8000b48:	08000cb4 	.word	0x08000cb4

08000b4c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b4c:	f7ff fb40 	bl	80001d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b50:	480b      	ldr	r0, [pc, #44]	; (8000b80 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b52:	490c      	ldr	r1, [pc, #48]	; (8000b84 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b54:	4a0c      	ldr	r2, [pc, #48]	; (8000b88 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b58:	e002      	b.n	8000b60 <LoopCopyDataInit>

08000b5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b5e:	3304      	adds	r3, #4

08000b60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b64:	d3f9      	bcc.n	8000b5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b66:	4a09      	ldr	r2, [pc, #36]	; (8000b8c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b68:	4c09      	ldr	r4, [pc, #36]	; (8000b90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b6c:	e001      	b.n	8000b72 <LoopFillZerobss>

08000b6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b70:	3204      	adds	r2, #4

08000b72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b74:	d3fb      	bcc.n	8000b6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b76:	f7ff fc43 	bl	8000400 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b7a:	f7ff fe85 	bl	8000888 <main>
  bx lr
 8000b7e:	4770      	bx	lr
  ldr r0, =_sdata
 8000b80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b84:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000b88:	08000cc8 	.word	0x08000cc8
  ldr r2, =_sbss
 8000b8c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000b90:	20000030 	.word	0x20000030

08000b94 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b94:	e7fe      	b.n	8000b94 <ADC1_IRQHandler>
 8000b96:	0000      	movs	r0, r0

08000b98 <_init>:
 8000b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b9a:	bf00      	nop
 8000b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b9e:	bc08      	pop	{r3}
 8000ba0:	469e      	mov	lr, r3
 8000ba2:	4770      	bx	lr

08000ba4 <_fini>:
 8000ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ba6:	bf00      	nop
 8000ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000baa:	bc08      	pop	{r3}
 8000bac:	469e      	mov	lr, r3
 8000bae:	4770      	bx	lr
