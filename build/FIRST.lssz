
FIRST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c74  080001d0  080001d0  000101d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000554  08000e44  08000e44  00010e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001398  08001398  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08001398  08001398  00011398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080013a0  080013a0  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080013a0  080013a0  000113a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080013a4  080013a4  000113a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080013a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000018  080013c0  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000034  080013c0  00020034  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   000014ac  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000037b  00000000  00000000  000214ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000081f  00000000  00000000  00021868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000090  00000000  00000000  00022088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000b1  00000000  00000000  00022118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000f21  00000000  00000000  000221c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000005fd  00000000  00000000  000230ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000012  00000000  00000000  000236e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000158  00000000  00000000  000236fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000038  00000000  00000000  00023854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <SystemInit>:
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
 80001d4:	4b17      	ldr	r3, [pc, #92]	; (8000234 <SystemInit+0x64>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	4a16      	ldr	r2, [pc, #88]	; (8000234 <SystemInit+0x64>)
 80001da:	f043 0301 	orr.w	r3, r3, #1
 80001de:	6013      	str	r3, [r2, #0]
 80001e0:	4b14      	ldr	r3, [pc, #80]	; (8000234 <SystemInit+0x64>)
 80001e2:	685a      	ldr	r2, [r3, #4]
 80001e4:	4913      	ldr	r1, [pc, #76]	; (8000234 <SystemInit+0x64>)
 80001e6:	4b14      	ldr	r3, [pc, #80]	; (8000238 <SystemInit+0x68>)
 80001e8:	4013      	ands	r3, r2
 80001ea:	604b      	str	r3, [r1, #4]
 80001ec:	4b11      	ldr	r3, [pc, #68]	; (8000234 <SystemInit+0x64>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	4a10      	ldr	r2, [pc, #64]	; (8000234 <SystemInit+0x64>)
 80001f2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80001f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80001fa:	6013      	str	r3, [r2, #0]
 80001fc:	4b0d      	ldr	r3, [pc, #52]	; (8000234 <SystemInit+0x64>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a0c      	ldr	r2, [pc, #48]	; (8000234 <SystemInit+0x64>)
 8000202:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000206:	6013      	str	r3, [r2, #0]
 8000208:	4b0a      	ldr	r3, [pc, #40]	; (8000234 <SystemInit+0x64>)
 800020a:	685b      	ldr	r3, [r3, #4]
 800020c:	4a09      	ldr	r2, [pc, #36]	; (8000234 <SystemInit+0x64>)
 800020e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000212:	6053      	str	r3, [r2, #4]
 8000214:	4b07      	ldr	r3, [pc, #28]	; (8000234 <SystemInit+0x64>)
 8000216:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800021a:	609a      	str	r2, [r3, #8]
 800021c:	4b05      	ldr	r3, [pc, #20]	; (8000234 <SystemInit+0x64>)
 800021e:	2200      	movs	r2, #0
 8000220:	62da      	str	r2, [r3, #44]	; 0x2c
 8000222:	f000 f87d 	bl	8000320 <SetSysClock>
 8000226:	4b05      	ldr	r3, [pc, #20]	; (800023c <SystemInit+0x6c>)
 8000228:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800022c:	609a      	str	r2, [r3, #8]
 800022e:	bf00      	nop
 8000230:	bd80      	pop	{r7, pc}
 8000232:	bf00      	nop
 8000234:	40021000 	.word	0x40021000
 8000238:	f8ff0000 	.word	0xf8ff0000
 800023c:	e000ed00 	.word	0xe000ed00

08000240 <SystemCoreClockUpdate>:
 8000240:	b480      	push	{r7}
 8000242:	b085      	sub	sp, #20
 8000244:	af00      	add	r7, sp, #0
 8000246:	2300      	movs	r3, #0
 8000248:	60fb      	str	r3, [r7, #12]
 800024a:	2300      	movs	r3, #0
 800024c:	60bb      	str	r3, [r7, #8]
 800024e:	2300      	movs	r3, #0
 8000250:	607b      	str	r3, [r7, #4]
 8000252:	2300      	movs	r3, #0
 8000254:	603b      	str	r3, [r7, #0]
 8000256:	4b2d      	ldr	r3, [pc, #180]	; (800030c <SystemCoreClockUpdate+0xcc>)
 8000258:	685b      	ldr	r3, [r3, #4]
 800025a:	f003 030c 	and.w	r3, r3, #12
 800025e:	60fb      	str	r3, [r7, #12]
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	2b08      	cmp	r3, #8
 8000264:	d011      	beq.n	800028a <SystemCoreClockUpdate+0x4a>
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	2b08      	cmp	r3, #8
 800026a:	d836      	bhi.n	80002da <SystemCoreClockUpdate+0x9a>
 800026c:	68fb      	ldr	r3, [r7, #12]
 800026e:	2b00      	cmp	r3, #0
 8000270:	d003      	beq.n	800027a <SystemCoreClockUpdate+0x3a>
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	2b04      	cmp	r3, #4
 8000276:	d004      	beq.n	8000282 <SystemCoreClockUpdate+0x42>
 8000278:	e02f      	b.n	80002da <SystemCoreClockUpdate+0x9a>
 800027a:	4b25      	ldr	r3, [pc, #148]	; (8000310 <SystemCoreClockUpdate+0xd0>)
 800027c:	4a25      	ldr	r2, [pc, #148]	; (8000314 <SystemCoreClockUpdate+0xd4>)
 800027e:	601a      	str	r2, [r3, #0]
 8000280:	e02f      	b.n	80002e2 <SystemCoreClockUpdate+0xa2>
 8000282:	4b23      	ldr	r3, [pc, #140]	; (8000310 <SystemCoreClockUpdate+0xd0>)
 8000284:	4a23      	ldr	r2, [pc, #140]	; (8000314 <SystemCoreClockUpdate+0xd4>)
 8000286:	601a      	str	r2, [r3, #0]
 8000288:	e02b      	b.n	80002e2 <SystemCoreClockUpdate+0xa2>
 800028a:	4b20      	ldr	r3, [pc, #128]	; (800030c <SystemCoreClockUpdate+0xcc>)
 800028c:	685b      	ldr	r3, [r3, #4]
 800028e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000292:	60bb      	str	r3, [r7, #8]
 8000294:	4b1d      	ldr	r3, [pc, #116]	; (800030c <SystemCoreClockUpdate+0xcc>)
 8000296:	685b      	ldr	r3, [r3, #4]
 8000298:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800029c:	607b      	str	r3, [r7, #4]
 800029e:	68bb      	ldr	r3, [r7, #8]
 80002a0:	0c9b      	lsrs	r3, r3, #18
 80002a2:	3302      	adds	r3, #2
 80002a4:	60bb      	str	r3, [r7, #8]
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d106      	bne.n	80002ba <SystemCoreClockUpdate+0x7a>
 80002ac:	68bb      	ldr	r3, [r7, #8]
 80002ae:	4a1a      	ldr	r2, [pc, #104]	; (8000318 <SystemCoreClockUpdate+0xd8>)
 80002b0:	fb02 f303 	mul.w	r3, r2, r3
 80002b4:	4a16      	ldr	r2, [pc, #88]	; (8000310 <SystemCoreClockUpdate+0xd0>)
 80002b6:	6013      	str	r3, [r2, #0]
 80002b8:	e013      	b.n	80002e2 <SystemCoreClockUpdate+0xa2>
 80002ba:	4b14      	ldr	r3, [pc, #80]	; (800030c <SystemCoreClockUpdate+0xcc>)
 80002bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002be:	f003 030f 	and.w	r3, r3, #15
 80002c2:	3301      	adds	r3, #1
 80002c4:	603b      	str	r3, [r7, #0]
 80002c6:	4a13      	ldr	r2, [pc, #76]	; (8000314 <SystemCoreClockUpdate+0xd4>)
 80002c8:	683b      	ldr	r3, [r7, #0]
 80002ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80002ce:	68ba      	ldr	r2, [r7, #8]
 80002d0:	fb02 f303 	mul.w	r3, r2, r3
 80002d4:	4a0e      	ldr	r2, [pc, #56]	; (8000310 <SystemCoreClockUpdate+0xd0>)
 80002d6:	6013      	str	r3, [r2, #0]
 80002d8:	e003      	b.n	80002e2 <SystemCoreClockUpdate+0xa2>
 80002da:	4b0d      	ldr	r3, [pc, #52]	; (8000310 <SystemCoreClockUpdate+0xd0>)
 80002dc:	4a0d      	ldr	r2, [pc, #52]	; (8000314 <SystemCoreClockUpdate+0xd4>)
 80002de:	601a      	str	r2, [r3, #0]
 80002e0:	bf00      	nop
 80002e2:	4b0a      	ldr	r3, [pc, #40]	; (800030c <SystemCoreClockUpdate+0xcc>)
 80002e4:	685b      	ldr	r3, [r3, #4]
 80002e6:	091b      	lsrs	r3, r3, #4
 80002e8:	f003 030f 	and.w	r3, r3, #15
 80002ec:	4a0b      	ldr	r2, [pc, #44]	; (800031c <SystemCoreClockUpdate+0xdc>)
 80002ee:	5cd3      	ldrb	r3, [r2, r3]
 80002f0:	b2db      	uxtb	r3, r3
 80002f2:	60fb      	str	r3, [r7, #12]
 80002f4:	4b06      	ldr	r3, [pc, #24]	; (8000310 <SystemCoreClockUpdate+0xd0>)
 80002f6:	681a      	ldr	r2, [r3, #0]
 80002f8:	68fb      	ldr	r3, [r7, #12]
 80002fa:	fa22 f303 	lsr.w	r3, r2, r3
 80002fe:	4a04      	ldr	r2, [pc, #16]	; (8000310 <SystemCoreClockUpdate+0xd0>)
 8000300:	6013      	str	r3, [r2, #0]
 8000302:	bf00      	nop
 8000304:	3714      	adds	r7, #20
 8000306:	46bd      	mov	sp, r7
 8000308:	bc80      	pop	{r7}
 800030a:	4770      	bx	lr
 800030c:	40021000 	.word	0x40021000
 8000310:	20000000 	.word	0x20000000
 8000314:	007a1200 	.word	0x007a1200
 8000318:	003d0900 	.word	0x003d0900
 800031c:	20000004 	.word	0x20000004

08000320 <SetSysClock>:
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
 8000324:	f000 f802 	bl	800032c <SetSysClockTo24>
 8000328:	bf00      	nop
 800032a:	bd80      	pop	{r7, pc}

0800032c <SetSysClockTo24>:
 800032c:	b480      	push	{r7}
 800032e:	b083      	sub	sp, #12
 8000330:	af00      	add	r7, sp, #0
 8000332:	2300      	movs	r3, #0
 8000334:	607b      	str	r3, [r7, #4]
 8000336:	2300      	movs	r3, #0
 8000338:	603b      	str	r3, [r7, #0]
 800033a:	4b30      	ldr	r3, [pc, #192]	; (80003fc <SetSysClockTo24+0xd0>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	4a2f      	ldr	r2, [pc, #188]	; (80003fc <SetSysClockTo24+0xd0>)
 8000340:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000344:	6013      	str	r3, [r2, #0]
 8000346:	4b2d      	ldr	r3, [pc, #180]	; (80003fc <SetSysClockTo24+0xd0>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800034e:	603b      	str	r3, [r7, #0]
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	3301      	adds	r3, #1
 8000354:	607b      	str	r3, [r7, #4]
 8000356:	683b      	ldr	r3, [r7, #0]
 8000358:	2b00      	cmp	r3, #0
 800035a:	d103      	bne.n	8000364 <SetSysClockTo24+0x38>
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000362:	d1f0      	bne.n	8000346 <SetSysClockTo24+0x1a>
 8000364:	4b25      	ldr	r3, [pc, #148]	; (80003fc <SetSysClockTo24+0xd0>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800036c:	2b00      	cmp	r3, #0
 800036e:	d002      	beq.n	8000376 <SetSysClockTo24+0x4a>
 8000370:	2301      	movs	r3, #1
 8000372:	603b      	str	r3, [r7, #0]
 8000374:	e001      	b.n	800037a <SetSysClockTo24+0x4e>
 8000376:	2300      	movs	r3, #0
 8000378:	603b      	str	r3, [r7, #0]
 800037a:	683b      	ldr	r3, [r7, #0]
 800037c:	2b01      	cmp	r3, #1
 800037e:	d137      	bne.n	80003f0 <SetSysClockTo24+0xc4>
 8000380:	4b1e      	ldr	r3, [pc, #120]	; (80003fc <SetSysClockTo24+0xd0>)
 8000382:	4a1e      	ldr	r2, [pc, #120]	; (80003fc <SetSysClockTo24+0xd0>)
 8000384:	685b      	ldr	r3, [r3, #4]
 8000386:	6053      	str	r3, [r2, #4]
 8000388:	4b1c      	ldr	r3, [pc, #112]	; (80003fc <SetSysClockTo24+0xd0>)
 800038a:	4a1c      	ldr	r2, [pc, #112]	; (80003fc <SetSysClockTo24+0xd0>)
 800038c:	685b      	ldr	r3, [r3, #4]
 800038e:	6053      	str	r3, [r2, #4]
 8000390:	4b1a      	ldr	r3, [pc, #104]	; (80003fc <SetSysClockTo24+0xd0>)
 8000392:	4a1a      	ldr	r2, [pc, #104]	; (80003fc <SetSysClockTo24+0xd0>)
 8000394:	685b      	ldr	r3, [r3, #4]
 8000396:	6053      	str	r3, [r2, #4]
 8000398:	4b18      	ldr	r3, [pc, #96]	; (80003fc <SetSysClockTo24+0xd0>)
 800039a:	685b      	ldr	r3, [r3, #4]
 800039c:	4a17      	ldr	r2, [pc, #92]	; (80003fc <SetSysClockTo24+0xd0>)
 800039e:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80003a2:	6053      	str	r3, [r2, #4]
 80003a4:	4b15      	ldr	r3, [pc, #84]	; (80003fc <SetSysClockTo24+0xd0>)
 80003a6:	685b      	ldr	r3, [r3, #4]
 80003a8:	4a14      	ldr	r2, [pc, #80]	; (80003fc <SetSysClockTo24+0xd0>)
 80003aa:	f443 1398 	orr.w	r3, r3, #1245184	; 0x130000
 80003ae:	6053      	str	r3, [r2, #4]
 80003b0:	4b12      	ldr	r3, [pc, #72]	; (80003fc <SetSysClockTo24+0xd0>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4a11      	ldr	r2, [pc, #68]	; (80003fc <SetSysClockTo24+0xd0>)
 80003b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80003ba:	6013      	str	r3, [r2, #0]
 80003bc:	bf00      	nop
 80003be:	4b0f      	ldr	r3, [pc, #60]	; (80003fc <SetSysClockTo24+0xd0>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d0f9      	beq.n	80003be <SetSysClockTo24+0x92>
 80003ca:	4b0c      	ldr	r3, [pc, #48]	; (80003fc <SetSysClockTo24+0xd0>)
 80003cc:	685b      	ldr	r3, [r3, #4]
 80003ce:	4a0b      	ldr	r2, [pc, #44]	; (80003fc <SetSysClockTo24+0xd0>)
 80003d0:	f023 0303 	bic.w	r3, r3, #3
 80003d4:	6053      	str	r3, [r2, #4]
 80003d6:	4b09      	ldr	r3, [pc, #36]	; (80003fc <SetSysClockTo24+0xd0>)
 80003d8:	685b      	ldr	r3, [r3, #4]
 80003da:	4a08      	ldr	r2, [pc, #32]	; (80003fc <SetSysClockTo24+0xd0>)
 80003dc:	f043 0302 	orr.w	r3, r3, #2
 80003e0:	6053      	str	r3, [r2, #4]
 80003e2:	bf00      	nop
 80003e4:	4b05      	ldr	r3, [pc, #20]	; (80003fc <SetSysClockTo24+0xd0>)
 80003e6:	685b      	ldr	r3, [r3, #4]
 80003e8:	f003 030c 	and.w	r3, r3, #12
 80003ec:	2b08      	cmp	r3, #8
 80003ee:	d1f9      	bne.n	80003e4 <SetSysClockTo24+0xb8>
 80003f0:	bf00      	nop
 80003f2:	370c      	adds	r7, #12
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bc80      	pop	{r7}
 80003f8:	4770      	bx	lr
 80003fa:	bf00      	nop
 80003fc:	40021000 	.word	0x40021000

08000400 <__libc_init_array>:
 8000400:	b570      	push	{r4, r5, r6, lr}
 8000402:	4e0d      	ldr	r6, [pc, #52]	; (8000438 <__libc_init_array+0x38>)
 8000404:	4d0d      	ldr	r5, [pc, #52]	; (800043c <__libc_init_array+0x3c>)
 8000406:	1b76      	subs	r6, r6, r5
 8000408:	10b6      	asrs	r6, r6, #2
 800040a:	d006      	beq.n	800041a <__libc_init_array+0x1a>
 800040c:	2400      	movs	r4, #0
 800040e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000412:	3401      	adds	r4, #1
 8000414:	4798      	blx	r3
 8000416:	42a6      	cmp	r6, r4
 8000418:	d1f9      	bne.n	800040e <__libc_init_array+0xe>
 800041a:	4e09      	ldr	r6, [pc, #36]	; (8000440 <__libc_init_array+0x40>)
 800041c:	4d09      	ldr	r5, [pc, #36]	; (8000444 <__libc_init_array+0x44>)
 800041e:	f000 fd05 	bl	8000e2c <_init>
 8000422:	1b76      	subs	r6, r6, r5
 8000424:	10b6      	asrs	r6, r6, #2
 8000426:	d006      	beq.n	8000436 <__libc_init_array+0x36>
 8000428:	2400      	movs	r4, #0
 800042a:	f855 3b04 	ldr.w	r3, [r5], #4
 800042e:	3401      	adds	r4, #1
 8000430:	4798      	blx	r3
 8000432:	42a6      	cmp	r6, r4
 8000434:	d1f9      	bne.n	800042a <__libc_init_array+0x2a>
 8000436:	bd70      	pop	{r4, r5, r6, pc}
 8000438:	080013a0 	.word	0x080013a0
 800043c:	080013a0 	.word	0x080013a0
 8000440:	080013a4 	.word	0x080013a4
 8000444:	080013a0 	.word	0x080013a0

08000448 <__do_global_dtors_aux>:
 8000448:	b510      	push	{r4, lr}
 800044a:	4c05      	ldr	r4, [pc, #20]	; (8000460 <__do_global_dtors_aux+0x18>)
 800044c:	7823      	ldrb	r3, [r4, #0]
 800044e:	b933      	cbnz	r3, 800045e <__do_global_dtors_aux+0x16>
 8000450:	4b04      	ldr	r3, [pc, #16]	; (8000464 <__do_global_dtors_aux+0x1c>)
 8000452:	b113      	cbz	r3, 800045a <__do_global_dtors_aux+0x12>
 8000454:	4804      	ldr	r0, [pc, #16]	; (8000468 <__do_global_dtors_aux+0x20>)
 8000456:	f3af 8000 	nop.w
 800045a:	2301      	movs	r3, #1
 800045c:	7023      	strb	r3, [r4, #0]
 800045e:	bd10      	pop	{r4, pc}
 8000460:	20000018 	.word	0x20000018
 8000464:	00000000 	.word	0x00000000
 8000468:	08000e2c 	.word	0x08000e2c

0800046c <frame_dummy>:
 800046c:	b508      	push	{r3, lr}
 800046e:	4b03      	ldr	r3, [pc, #12]	; (800047c <frame_dummy+0x10>)
 8000470:	b11b      	cbz	r3, 800047a <frame_dummy+0xe>
 8000472:	4903      	ldr	r1, [pc, #12]	; (8000480 <frame_dummy+0x14>)
 8000474:	4803      	ldr	r0, [pc, #12]	; (8000484 <frame_dummy+0x18>)
 8000476:	f3af 8000 	nop.w
 800047a:	bd08      	pop	{r3, pc}
 800047c:	00000000 	.word	0x00000000
 8000480:	2000001c 	.word	0x2000001c
 8000484:	08000e2c 	.word	0x08000e2c

08000488 <_Z15UART_sendstringPKc>:
    {0x00, 0x7F, 0x09, 0x19, 0x29, 0x46}, // R
    {0x00, 0x7F, 0x04, 0x08, 0x10, 0x7F} // N
};

void UART_sendstring(const char *str) {
    while (*str) {
 8000488:	7801      	ldrb	r1, [r0, #0]
 800048a:	b149      	cbz	r1, 80004a0 <_Z15UART_sendstringPKc+0x18>
        while (!(USART1->SR & USART_SR_TXE));
 800048c:	4a05      	ldr	r2, [pc, #20]	; (80004a4 <_Z15UART_sendstringPKc+0x1c>)
 800048e:	8813      	ldrh	r3, [r2, #0]
 8000490:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000494:	d0fb      	beq.n	800048e <_Z15UART_sendstringPKc+0x6>
        USART1->DR = *str++;
 8000496:	8091      	strh	r1, [r2, #4]
    while (*str) {
 8000498:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 800049c:	2900      	cmp	r1, #0
 800049e:	d1f6      	bne.n	800048e <_Z15UART_sendstringPKc+0x6>
    }
}
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	40013800 	.word	0x40013800

080004a8 <_Z18brightness_messagePKcc>:

void brightness_message(const char buffer[], char color) {
 80004a8:	b500      	push	{lr}
 80004aa:	b08f      	sub	sp, #60	; 0x3c

    char message[50];
    const char *pref; 
    char *msg_write = message; //указатель на буфер

    if (color == 'b') {
 80004ac:	2962      	cmp	r1, #98	; 0x62
 80004ae:	d034      	beq.n	800051a <_Z18brightness_messagePKcc+0x72>
        pref = blue_msg;
    } else if (color == 'g') {
        pref = green_msg;
 80004b0:	4b1b      	ldr	r3, [pc, #108]	; (8000520 <_Z18brightness_messagePKcc+0x78>)
 80004b2:	4a1c      	ldr	r2, [pc, #112]	; (8000524 <_Z18brightness_messagePKcc+0x7c>)
 80004b4:	2967      	cmp	r1, #103	; 0x67
 80004b6:	bf14      	ite	ne
 80004b8:	469c      	movne	ip, r3
 80004ba:	4694      	moveq	ip, r2
    } else {
        pref = both_msg;
    }

    while (*pref) {
 80004bc:	f89c 2000 	ldrb.w	r2, [ip]
 80004c0:	ab01      	add	r3, sp, #4
        *msg_write++ = *pref++;
 80004c2:	469e      	mov	lr, r3
 80004c4:	f803 2b01 	strb.w	r2, [r3], #1
    while (*pref) {
 80004c8:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	d1f8      	bne.n	80004c2 <_Z18brightness_messagePKcc+0x1a>
    }

    if (color == 'b' || color == 'g') {
 80004d0:	2962      	cmp	r1, #98	; 0x62
 80004d2:	d007      	beq.n	80004e4 <_Z18brightness_messagePKcc+0x3c>
 80004d4:	2967      	cmp	r1, #103	; 0x67
 80004d6:	d005      	beq.n	80004e4 <_Z18brightness_messagePKcc+0x3c>
        *msg_write++ = buffer[1];
        *msg_write++ = buffer[2];
    } 
    else {
        *msg_write++ = buffer[2];
 80004d8:	7882      	ldrb	r2, [r0, #2]
 80004da:	701a      	strb	r2, [r3, #0]
        *msg_write++ = buffer[3];
 80004dc:	78c2      	ldrb	r2, [r0, #3]
 80004de:	f10e 0e03 	add.w	lr, lr, #3
 80004e2:	e004      	b.n	80004ee <_Z18brightness_messagePKcc+0x46>
        *msg_write++ = buffer[1];
 80004e4:	7842      	ldrb	r2, [r0, #1]
 80004e6:	701a      	strb	r2, [r3, #0]
        *msg_write++ = buffer[2];
 80004e8:	7882      	ldrb	r2, [r0, #2]
 80004ea:	f10e 0e03 	add.w	lr, lr, #3
 80004ee:	705a      	strb	r2, [r3, #1]
    }
    
    *msg_write++ = ' '; 
 80004f0:	2320      	movs	r3, #32
 80004f2:	f88e 3000 	strb.w	r3, [lr]
    *msg_write++ = '%';
 80004f6:	2325      	movs	r3, #37	; 0x25
 80004f8:	f88e 3001 	strb.w	r3, [lr, #1]
    *msg_write++ = '\r';
 80004fc:	230d      	movs	r3, #13
 80004fe:	f88e 3002 	strb.w	r3, [lr, #2]
    *msg_write++ = '\n';
 8000502:	230a      	movs	r3, #10
 8000504:	f88e 3003 	strb.w	r3, [lr, #3]
    *msg_write = '\0';
 8000508:	2300      	movs	r3, #0
 800050a:	f88e 3004 	strb.w	r3, [lr, #4]

    UART_sendstring(message);
 800050e:	a801      	add	r0, sp, #4
 8000510:	f7ff ffba 	bl	8000488 <_Z15UART_sendstringPKc>
}
 8000514:	b00f      	add	sp, #60	; 0x3c
 8000516:	f85d fb04 	ldr.w	pc, [sp], #4
        pref = blue_msg;
 800051a:	f8df c00c 	ldr.w	ip, [pc, #12]	; 8000528 <_Z18brightness_messagePKcc+0x80>
 800051e:	e7cd      	b.n	80004bc <_Z18brightness_messagePKcc+0x14>
 8000520:	08000e70 	.word	0x08000e70
 8000524:	08000e9c 	.word	0x08000e9c
 8000528:	08000e44 	.word	0x08000e44

0800052c <_Z23invalid_command_messagePKc>:

void invalid_command_message(const char buffer[]) {
 800052c:	b500      	push	{lr}
 800052e:	b089      	sub	sp, #36	; 0x24
    const char *invalid_msg = "\r\nInvalid command ";

    char message[25];
    char *msg_write = message; //указатель на позицию

    while (*invalid_msg) {
 8000530:	4910      	ldr	r1, [pc, #64]	; (8000574 <_Z23invalid_command_messagePKc+0x48>)
    char *msg_write = message; //указатель на позицию
 8000532:	ab01      	add	r3, sp, #4
    while (*invalid_msg) {
 8000534:	220d      	movs	r2, #13
        *msg_write++ = *invalid_msg++;
 8000536:	f803 2b01 	strb.w	r2, [r3], #1
    while (*invalid_msg) {
 800053a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800053e:	2a00      	cmp	r2, #0
 8000540:	d1f9      	bne.n	8000536 <_Z23invalid_command_messagePKc+0xa>
    }

    for (uint8_t i = 0; i < BUFFER_SIZE; i++) {
 8000542:	1e42      	subs	r2, r0, #1
 8000544:	3003      	adds	r0, #3
 8000546:	e001      	b.n	800054c <_Z23invalid_command_messagePKc+0x20>
 8000548:	4290      	cmp	r0, r2
 800054a:	d006      	beq.n	800055a <_Z23invalid_command_messagePKc+0x2e>
        if (buffer[i] != '\0') {
 800054c:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8000550:	2900      	cmp	r1, #0
 8000552:	d0f9      	beq.n	8000548 <_Z23invalid_command_messagePKc+0x1c>
            *msg_write++ = buffer[i];
 8000554:	f803 1b01 	strb.w	r1, [r3], #1
 8000558:	e7f6      	b.n	8000548 <_Z23invalid_command_messagePKc+0x1c>
        }
    }

    *msg_write++ = '\r';
 800055a:	220d      	movs	r2, #13
 800055c:	701a      	strb	r2, [r3, #0]
    *msg_write++ = '\n';
 800055e:	220a      	movs	r2, #10
 8000560:	705a      	strb	r2, [r3, #1]
    *msg_write = '\0';
 8000562:	2200      	movs	r2, #0
 8000564:	709a      	strb	r2, [r3, #2]

    UART_sendstring(message);
 8000566:	a801      	add	r0, sp, #4
 8000568:	f7ff ff8e 	bl	8000488 <_Z15UART_sendstringPKc>
}
 800056c:	b009      	add	sp, #36	; 0x24
 800056e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000572:	bf00      	nop
 8000574:	08000ecc 	.word	0x08000ecc

08000578 <_Z19info_message_helperPKch>:

void info_message_helper(const char *inf_msg, uint8_t brightness) {
 8000578:	b500      	push	{lr}
 800057a:	b089      	sub	sp, #36	; 0x24
    char message[30]; 
    char *msg_write = message; 

    while (*inf_msg) {
 800057c:	7803      	ldrb	r3, [r0, #0]
 800057e:	b1fb      	cbz	r3, 80005c0 <_Z19info_message_helperPKch+0x48>
    char *msg_write = message; 
 8000580:	466a      	mov	r2, sp
        *msg_write++ = *inf_msg++;
 8000582:	f802 3b01 	strb.w	r3, [r2], #1
    while (*inf_msg) {
 8000586:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800058a:	2b00      	cmp	r3, #0
 800058c:	d1f9      	bne.n	8000582 <_Z19info_message_helperPKch+0xa>
    }

    *msg_write++ = '0' + (brightness / 10);
 800058e:	4b0d      	ldr	r3, [pc, #52]	; (80005c4 <_Z19info_message_helperPKch+0x4c>)
 8000590:	fba3 0301 	umull	r0, r3, r3, r1
 8000594:	08db      	lsrs	r3, r3, #3
 8000596:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800059a:	7010      	strb	r0, [r2, #0]
    *msg_write++ = '0' + (brightness % 10);
 800059c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80005a0:	eba1 0143 	sub.w	r1, r1, r3, lsl #1
 80005a4:	3130      	adds	r1, #48	; 0x30
 80005a6:	7051      	strb	r1, [r2, #1]
    *msg_write++ = '\r';
 80005a8:	230d      	movs	r3, #13
 80005aa:	7093      	strb	r3, [r2, #2]
    *msg_write++ = '\n';
 80005ac:	230a      	movs	r3, #10
 80005ae:	70d3      	strb	r3, [r2, #3]
    *msg_write = '\0';
 80005b0:	2300      	movs	r3, #0
 80005b2:	7113      	strb	r3, [r2, #4]

    UART_sendstring(message);
 80005b4:	4668      	mov	r0, sp
 80005b6:	f7ff ff67 	bl	8000488 <_Z15UART_sendstringPKc>
}
 80005ba:	b009      	add	sp, #36	; 0x24
 80005bc:	f85d fb04 	ldr.w	pc, [sp], #4
    char *msg_write = message; 
 80005c0:	466a      	mov	r2, sp
 80005c2:	e7e4      	b.n	800058e <_Z19info_message_helperPKch+0x16>
 80005c4:	cccccccd 	.word	0xcccccccd

080005c8 <_Z12info_messagehh>:

void info_message(const uint8_t b, const uint8_t g) {
 80005c8:	b510      	push	{r4, lr}
 80005ca:	460c      	mov	r4, r1
    const char *blue_inf_msg = "\r\nBrightness of blue LED - ";
    const char *green_inf_msg = "Brightness of green LED - ";

    info_message_helper(blue_inf_msg, b);
 80005cc:	4601      	mov	r1, r0
 80005ce:	4804      	ldr	r0, [pc, #16]	; (80005e0 <_Z12info_messagehh+0x18>)
 80005d0:	f7ff ffd2 	bl	8000578 <_Z19info_message_helperPKch>

    info_message_helper(green_inf_msg, g);
 80005d4:	4621      	mov	r1, r4
 80005d6:	4803      	ldr	r0, [pc, #12]	; (80005e4 <_Z12info_messagehh+0x1c>)
 80005d8:	f7ff ffce 	bl	8000578 <_Z19info_message_helperPKch>
}
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	bf00      	nop
 80005e0:	08000ee0 	.word	0x08000ee0
 80005e4:	08000efc 	.word	0x08000efc

080005e8 <_Z9send_bytebhh>:
    AFIO->MAPR |= AFIO_MAPR_I2C1_REMAP;


}

void send_byte(bool type, uint8_t bytes, uint8_t lenght){
 80005e8:	4684      	mov	ip, r0

     GPIOC->BSRR = GPIO_BSRR_BS9;
 80005ea:	4b2a      	ldr	r3, [pc, #168]	; (8000694 <_Z9send_bytebhh+0xac>)
 80005ec:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005f0:	6118      	str	r0, [r3, #16]
     GPIOC->BSRR = GPIO_BSRR_BS8;
 80005f2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80005f6:	6118      	str	r0, [r3, #16]

     while (I2C1->SR2 & I2C_SR2_BUSY) {}
 80005f8:	4827      	ldr	r0, [pc, #156]	; (8000698 <_Z9send_bytebhh+0xb0>)
 80005fa:	8b03      	ldrh	r3, [r0, #24]
 80005fc:	f013 0f02 	tst.w	r3, #2
 8000600:	d1fb      	bne.n	80005fa <_Z9send_bytebhh+0x12>

     I2C1->CR1 |= I2C_CR1_START;
 8000602:	4825      	ldr	r0, [pc, #148]	; (8000698 <_Z9send_bytebhh+0xb0>)
 8000604:	8803      	ldrh	r3, [r0, #0]
 8000606:	b29b      	uxth	r3, r3
 8000608:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800060c:	8003      	strh	r3, [r0, #0]

     while(!(I2C1->SR1 & I2C_SR1_SB)){}   
 800060e:	8a83      	ldrh	r3, [r0, #20]
 8000610:	f013 0f01 	tst.w	r3, #1
 8000614:	d0fb      	beq.n	800060e <_Z9send_bytebhh+0x26>

     GPIOC->BSRR = GPIO_BSRR_BR9;
 8000616:	4b1f      	ldr	r3, [pc, #124]	; (8000694 <_Z9send_bytebhh+0xac>)
 8000618:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800061c:	6118      	str	r0, [r3, #16]

     I2C1->DR = 0b01111000; //78
 800061e:	f5a3 433c 	sub.w	r3, r3, #48128	; 0xbc00
 8000622:	2078      	movs	r0, #120	; 0x78
 8000624:	8218      	strh	r0, [r3, #16]

     while(!(I2C1->SR1 & I2C_SR1_ADDR)){} 
 8000626:	4618      	mov	r0, r3
 8000628:	8a83      	ldrh	r3, [r0, #20]
 800062a:	f013 0f02 	tst.w	r3, #2
 800062e:	d0fb      	beq.n	8000628 <_Z9send_bytebhh+0x40>

     I2C1->SR2;
 8000630:	4b19      	ldr	r3, [pc, #100]	; (8000698 <_Z9send_bytebhh+0xb0>)
 8000632:	8b1b      	ldrh	r3, [r3, #24]

     GPIOC->BSRR = GPIO_BSRR_BR8;
 8000634:	4b17      	ldr	r3, [pc, #92]	; (8000694 <_Z9send_bytebhh+0xac>)
 8000636:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800063a:	6118      	str	r0, [r3, #16]

     while (!(I2C1->SR1 & I2C_SR1_TXE)) {}
 800063c:	4816      	ldr	r0, [pc, #88]	; (8000698 <_Z9send_bytebhh+0xb0>)
 800063e:	8a83      	ldrh	r3, [r0, #20]
 8000640:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000644:	d0fb      	beq.n	800063e <_Z9send_bytebhh+0x56>

     I2C1->DR = (type)? 0x00 : 0x40; // 0 данные, 1 команда 
 8000646:	f08c 0301 	eor.w	r3, ip, #1
 800064a:	019b      	lsls	r3, r3, #6
 800064c:	4812      	ldr	r0, [pc, #72]	; (8000698 <_Z9send_bytebhh+0xb0>)
 800064e:	8203      	strh	r3, [r0, #16]

     while (!(I2C1->SR1 & I2C_SR1_BTF)) {}
 8000650:	8a83      	ldrh	r3, [r0, #20]
 8000652:	f013 0f04 	tst.w	r3, #4
 8000656:	d0fb      	beq.n	8000650 <_Z9send_bytebhh+0x68>

     while (!(I2C1->SR1 & I2C_SR1_TXE)) {}
 8000658:	480f      	ldr	r0, [pc, #60]	; (8000698 <_Z9send_bytebhh+0xb0>)
 800065a:	8a83      	ldrh	r3, [r0, #20]
 800065c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000660:	d0fb      	beq.n	800065a <_Z9send_bytebhh+0x72>

     for (uint8_t i = 0; i < lenght; i++) {
 8000662:	b15a      	cbz	r2, 800067c <_Z9send_bytebhh+0x94>
 8000664:	f04f 0c00 	mov.w	ip, #0
		I2C1->DR = bytes;
 8000668:	480b      	ldr	r0, [pc, #44]	; (8000698 <_Z9send_bytebhh+0xb0>)
 800066a:	8201      	strh	r1, [r0, #16]
		while((I2C1->SR1 & I2C_SR1_TXE) == 0);
 800066c:	8a83      	ldrh	r3, [r0, #20]
 800066e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000672:	d0fb      	beq.n	800066c <_Z9send_bytebhh+0x84>
     for (uint8_t i = 0; i < lenght; i++) {
 8000674:	f10c 0c01 	add.w	ip, ip, #1
 8000678:	4562      	cmp	r2, ip
 800067a:	d1f6      	bne.n	800066a <_Z9send_bytebhh+0x82>
	}

     while (!(I2C1->SR1 & I2C_SR1_BTF)) {}
 800067c:	4a06      	ldr	r2, [pc, #24]	; (8000698 <_Z9send_bytebhh+0xb0>)
 800067e:	8a93      	ldrh	r3, [r2, #20]
 8000680:	f013 0f04 	tst.w	r3, #4
 8000684:	d0fb      	beq.n	800067e <_Z9send_bytebhh+0x96>

     I2C1->CR1 |= I2C_CR1_STOP;
 8000686:	4a04      	ldr	r2, [pc, #16]	; (8000698 <_Z9send_bytebhh+0xb0>)
 8000688:	8813      	ldrh	r3, [r2, #0]
 800068a:	b29b      	uxth	r3, r3
 800068c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000690:	8013      	strh	r3, [r2, #0]

}
 8000692:	4770      	bx	lr
 8000694:	40011000 	.word	0x40011000
 8000698:	40005400 	.word	0x40005400

0800069c <_Z11symbol_drawc>:

void symbol_draw(const char symbol) {
 800069c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     uint8_t index = 0;
     switch(symbol) {
 800069e:	3820      	subs	r0, #32
 80006a0:	2835      	cmp	r0, #53	; 0x35
 80006a2:	d81c      	bhi.n	80006de <_Z11symbol_drawc+0x42>
 80006a4:	e8df f000 	tbb	[pc, r0]
 80006a8:	1b1b1b43 	.word	0x1b1b1b43
 80006ac:	1b1b3f1b 	.word	0x1b1b3f1b
 80006b0:	1b1b1b1b 	.word	0x1b1b1b1b
 80006b4:	1b1b411b 	.word	0x1b1b411b
 80006b8:	312f531b 	.word	0x312f531b
 80006bc:	39373533 	.word	0x39373533
 80006c0:	1b1b3d3b 	.word	0x1b1b3d3b
 80006c4:	1b1b1b1b 	.word	0x1b1b1b1b
 80006c8:	1b451b1b 	.word	0x1b451b1b
 80006cc:	4d1b4b1b 	.word	0x4d1b4b1b
 80006d0:	1b1b1b1b 	.word	0x1b1b1b1b
 80006d4:	1b511b47 	.word	0x1b511b47
 80006d8:	1b4f1b1b 	.word	0x1b4f1b1b
 80006dc:	491b      	.short	0x491b
     uint8_t index = 0;
 80006de:	2300      	movs	r3, #0
        case 'G': index = 17; break;
        case 'R': index = 18; break;
        case 'N': index = 19; break;
    }

    for (uint8_t i = 0; i < 6; i++) {
 80006e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80006e4:	005b      	lsls	r3, r3, #1
 80006e6:	1e5c      	subs	r4, r3, #1
 80006e8:	4d1a      	ldr	r5, [pc, #104]	; (8000754 <_Z11symbol_drawc+0xb8>)
 80006ea:	442c      	add	r4, r5
 80006ec:	3505      	adds	r5, #5
 80006ee:	441d      	add	r5, r3
          send_byte(DATA, font6x8[index][i], 1);
 80006f0:	2701      	movs	r7, #1
 80006f2:	2600      	movs	r6, #0
 80006f4:	463a      	mov	r2, r7
 80006f6:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80006fa:	4630      	mov	r0, r6
 80006fc:	f7ff ff74 	bl	80005e8 <_Z9send_bytebhh>
    for (uint8_t i = 0; i < 6; i++) {
 8000700:	42ac      	cmp	r4, r5
 8000702:	d1f7      	bne.n	80006f4 <_Z11symbol_drawc+0x58>
     }
}
 8000704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        case '2': index = 2; break;
 8000706:	2302      	movs	r3, #2
 8000708:	e7ea      	b.n	80006e0 <_Z11symbol_drawc+0x44>
        case '3': index = 3; break;
 800070a:	2303      	movs	r3, #3
 800070c:	e7e8      	b.n	80006e0 <_Z11symbol_drawc+0x44>
        case '4': index = 4; break;
 800070e:	2304      	movs	r3, #4
 8000710:	e7e6      	b.n	80006e0 <_Z11symbol_drawc+0x44>
        case '5': index = 5; break;
 8000712:	2305      	movs	r3, #5
 8000714:	e7e4      	b.n	80006e0 <_Z11symbol_drawc+0x44>
        case '6': index = 6; break;
 8000716:	2306      	movs	r3, #6
 8000718:	e7e2      	b.n	80006e0 <_Z11symbol_drawc+0x44>
        case '7': index = 7; break;
 800071a:	2307      	movs	r3, #7
 800071c:	e7e0      	b.n	80006e0 <_Z11symbol_drawc+0x44>
        case '8': index = 8; break;
 800071e:	2308      	movs	r3, #8
 8000720:	e7de      	b.n	80006e0 <_Z11symbol_drawc+0x44>
        case '9': index = 9; break;
 8000722:	2309      	movs	r3, #9
 8000724:	e7dc      	b.n	80006e0 <_Z11symbol_drawc+0x44>
        case '%': index = 10; break;
 8000726:	230a      	movs	r3, #10
 8000728:	e7da      	b.n	80006e0 <_Z11symbol_drawc+0x44>
        case '-': index = 11; break;
 800072a:	230b      	movs	r3, #11
 800072c:	e7d8      	b.n	80006e0 <_Z11symbol_drawc+0x44>
        case ' ': index = 12; break;
 800072e:	230c      	movs	r3, #12
 8000730:	e7d6      	b.n	80006e0 <_Z11symbol_drawc+0x44>
        case 'B': index = 13; break;
 8000732:	230d      	movs	r3, #13
 8000734:	e7d4      	b.n	80006e0 <_Z11symbol_drawc+0x44>
        case 'L': index = 14; break;
 8000736:	230e      	movs	r3, #14
 8000738:	e7d2      	b.n	80006e0 <_Z11symbol_drawc+0x44>
        case 'U': index = 15; break;
 800073a:	230f      	movs	r3, #15
 800073c:	e7d0      	b.n	80006e0 <_Z11symbol_drawc+0x44>
        case 'E': index = 16; break;
 800073e:	2310      	movs	r3, #16
 8000740:	e7ce      	b.n	80006e0 <_Z11symbol_drawc+0x44>
        case 'G': index = 17; break;
 8000742:	2311      	movs	r3, #17
 8000744:	e7cc      	b.n	80006e0 <_Z11symbol_drawc+0x44>
        case 'R': index = 18; break;
 8000746:	2312      	movs	r3, #18
 8000748:	e7ca      	b.n	80006e0 <_Z11symbol_drawc+0x44>
        case 'N': index = 19; break;
 800074a:	2313      	movs	r3, #19
 800074c:	e7c8      	b.n	80006e0 <_Z11symbol_drawc+0x44>
     switch(symbol) {
 800074e:	2301      	movs	r3, #1
 8000750:	e7c6      	b.n	80006e0 <_Z11symbol_drawc+0x44>
 8000752:	bf00      	nop
 8000754:	08000f20 	.word	0x08000f20

08000758 <_Z15brightness_drawccc>:
            send_byte(DATA, image[page * 128 + col], 1);
        }
    }
}

void brightness_draw(const char color, const char units, const char dec) {
 8000758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800075c:	460d      	mov	r5, r1
 800075e:	4616      	mov	r6, r2
     
     if (color == 'g') {
 8000760:	2867      	cmp	r0, #103	; 0x67
 8000762:	d045      	beq.n	80007f0 <_Z15brightness_drawccc+0x98>
          send_byte(COMMAND, 0xB1, 1);
     }
     else if (color == 'b') {
 8000764:	2862      	cmp	r0, #98	; 0x62
 8000766:	d05d      	beq.n	8000824 <_Z15brightness_drawccc+0xcc>
          send_byte(COMMAND, 0xB3, 1);
     }

     send_byte(COMMAND, 0x00, 1);
 8000768:	2201      	movs	r2, #1
 800076a:	2100      	movs	r1, #0
 800076c:	4610      	mov	r0, r2
 800076e:	f7ff ff3b 	bl	80005e8 <_Z9send_bytebhh>
     send_byte(COMMAND, 0x10, 1);
 8000772:	2201      	movs	r2, #1
 8000774:	2110      	movs	r1, #16
 8000776:	4610      	mov	r0, r2
 8000778:	f7ff ff36 	bl	80005e8 <_Z9send_bytebhh>
     
     send_byte(COMMAND, 0x00, 12);
 800077c:	220c      	movs	r2, #12
 800077e:	2100      	movs	r1, #0
 8000780:	2001      	movs	r0, #1
 8000782:	f7ff ff31 	bl	80005e8 <_Z9send_bytebhh>
     }
     else if (color == 'b') {
          send_byte(COMMAND, 0xB3, 1);
     }

     send_byte(COMMAND, 0x00, 1); 
 8000786:	2201      	movs	r2, #1
 8000788:	2100      	movs	r1, #0
 800078a:	4610      	mov	r0, r2
 800078c:	f7ff ff2c 	bl	80005e8 <_Z9send_bytebhh>
     send_byte(COMMAND, 0x10, 1);
 8000790:	2201      	movs	r2, #1
 8000792:	2110      	movs	r1, #16
 8000794:	4610      	mov	r0, r2
 8000796:	f7ff ff27 	bl	80005e8 <_Z9send_bytebhh>


     uint8_t index = units - '0';
 800079a:	3d30      	subs	r5, #48	; 0x30
 800079c:	b2ed      	uxtb	r5, r5
 800079e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80007a2:	006d      	lsls	r5, r5, #1
 80007a4:	1e6c      	subs	r4, r5, #1
 80007a6:	4f2c      	ldr	r7, [pc, #176]	; (8000858 <_Z15brightness_drawccc+0x100>)
 80007a8:	443c      	add	r4, r7
 80007aa:	3705      	adds	r7, #5
 80007ac:	443d      	add	r5, r7
     for (uint8_t i = 0; i < 6; i++) {
          send_byte(DATA, font6x8[index][i], 1);
 80007ae:	f04f 0901 	mov.w	r9, #1
 80007b2:	f04f 0800 	mov.w	r8, #0
 80007b6:	464a      	mov	r2, r9
 80007b8:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80007bc:	4640      	mov	r0, r8
 80007be:	f7ff ff13 	bl	80005e8 <_Z9send_bytebhh>
     for (uint8_t i = 0; i < 6; i++) {
 80007c2:	42ac      	cmp	r4, r5
 80007c4:	d1f7      	bne.n	80007b6 <_Z15brightness_drawccc+0x5e>
     }

     index = dec - '0';
 80007c6:	3e30      	subs	r6, #48	; 0x30
 80007c8:	b2f6      	uxtb	r6, r6
 80007ca:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80007ce:	4c23      	ldr	r4, [pc, #140]	; (800085c <_Z15brightness_drawccc+0x104>)
 80007d0:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 80007d4:	eb07 0546 	add.w	r5, r7, r6, lsl #1
     for (uint8_t i = 0; i < 6; i++) {
          send_byte(DATA, font6x8[index][i], 1);
 80007d8:	2701      	movs	r7, #1
 80007da:	2600      	movs	r6, #0
 80007dc:	463a      	mov	r2, r7
 80007de:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80007e2:	4630      	mov	r0, r6
 80007e4:	f7ff ff00 	bl	80005e8 <_Z9send_bytebhh>
     for (uint8_t i = 0; i < 6; i++) {
 80007e8:	42ac      	cmp	r4, r5
 80007ea:	d1f7      	bne.n	80007dc <_Z15brightness_drawccc+0x84>
     }
}
 80007ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          send_byte(COMMAND, 0xB1, 1);
 80007f0:	2201      	movs	r2, #1
 80007f2:	21b1      	movs	r1, #177	; 0xb1
 80007f4:	4610      	mov	r0, r2
 80007f6:	f7ff fef7 	bl	80005e8 <_Z9send_bytebhh>
     send_byte(COMMAND, 0x00, 1);
 80007fa:	2201      	movs	r2, #1
 80007fc:	2100      	movs	r1, #0
 80007fe:	4610      	mov	r0, r2
 8000800:	f7ff fef2 	bl	80005e8 <_Z9send_bytebhh>
     send_byte(COMMAND, 0x10, 1);
 8000804:	2201      	movs	r2, #1
 8000806:	2110      	movs	r1, #16
 8000808:	4610      	mov	r0, r2
 800080a:	f7ff feed 	bl	80005e8 <_Z9send_bytebhh>
     send_byte(COMMAND, 0x00, 12);
 800080e:	220c      	movs	r2, #12
 8000810:	2100      	movs	r1, #0
 8000812:	2001      	movs	r0, #1
 8000814:	f7ff fee8 	bl	80005e8 <_Z9send_bytebhh>
          send_byte(COMMAND, 0xB1, 1);
 8000818:	2201      	movs	r2, #1
 800081a:	21b1      	movs	r1, #177	; 0xb1
 800081c:	4610      	mov	r0, r2
 800081e:	f7ff fee3 	bl	80005e8 <_Z9send_bytebhh>
 8000822:	e7b0      	b.n	8000786 <_Z15brightness_drawccc+0x2e>
          send_byte(COMMAND, 0xB3, 1);
 8000824:	2201      	movs	r2, #1
 8000826:	21b3      	movs	r1, #179	; 0xb3
 8000828:	4610      	mov	r0, r2
 800082a:	f7ff fedd 	bl	80005e8 <_Z9send_bytebhh>
     send_byte(COMMAND, 0x00, 1);
 800082e:	2201      	movs	r2, #1
 8000830:	2100      	movs	r1, #0
 8000832:	4610      	mov	r0, r2
 8000834:	f7ff fed8 	bl	80005e8 <_Z9send_bytebhh>
     send_byte(COMMAND, 0x10, 1);
 8000838:	2201      	movs	r2, #1
 800083a:	2110      	movs	r1, #16
 800083c:	4610      	mov	r0, r2
 800083e:	f7ff fed3 	bl	80005e8 <_Z9send_bytebhh>
     send_byte(COMMAND, 0x00, 12);
 8000842:	220c      	movs	r2, #12
 8000844:	2100      	movs	r1, #0
 8000846:	2001      	movs	r0, #1
 8000848:	f7ff fece 	bl	80005e8 <_Z9send_bytebhh>
          send_byte(COMMAND, 0xB3, 1);
 800084c:	2201      	movs	r2, #1
 800084e:	21b3      	movs	r1, #179	; 0xb3
 8000850:	4610      	mov	r0, r2
 8000852:	f7ff fec9 	bl	80005e8 <_Z9send_bytebhh>
 8000856:	e796      	b.n	8000786 <_Z15brightness_drawccc+0x2e>
 8000858:	08000f20 	.word	0x08000f20
 800085c:	08000f1f 	.word	0x08000f1f

08000860 <_Z13display_clearv>:

void display_clear() {
 8000860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000862:	24b0      	movs	r4, #176	; 0xb0
     for (uint8_t i = 0; i <= 7; i++) {
          send_byte(COMMAND, 0xB0 + i, 1);
 8000864:	2701      	movs	r7, #1
          send_byte(DATA, 0x00, 128);
 8000866:	2680      	movs	r6, #128	; 0x80
 8000868:	2500      	movs	r5, #0
          send_byte(COMMAND, 0xB0 + i, 1);
 800086a:	463a      	mov	r2, r7
 800086c:	4621      	mov	r1, r4
 800086e:	4638      	mov	r0, r7
 8000870:	f7ff feba 	bl	80005e8 <_Z9send_bytebhh>
          send_byte(DATA, 0x00, 128);
 8000874:	4632      	mov	r2, r6
 8000876:	4629      	mov	r1, r5
 8000878:	4628      	mov	r0, r5
 800087a:	f7ff feb5 	bl	80005e8 <_Z9send_bytebhh>
     for (uint8_t i = 0; i <= 7; i++) {
 800087e:	3401      	adds	r4, #1
 8000880:	b2e4      	uxtb	r4, r4
 8000882:	2cb8      	cmp	r4, #184	; 0xb8
 8000884:	d1f1      	bne.n	800086a <_Z13display_clearv+0xa>
     }
}
 8000886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000888 <main>:

     display_clear();
     
} 

int main() {
 8000888:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800088c:	b083      	sub	sp, #12

#elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
/* GNU gcc specific functions */

static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
 800088e:	b672      	cpsid	i
     RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
 8000890:	4bbf      	ldr	r3, [pc, #764]	; (8000b90 <main+0x308>)
 8000892:	699a      	ldr	r2, [r3, #24]
 8000894:	f042 0201 	orr.w	r2, r2, #1
 8000898:	619a      	str	r2, [r3, #24]
     RCC->APB2ENR & RCC_APB2ENR_AFIOEN;
 800089a:	699a      	ldr	r2, [r3, #24]
     RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 800089c:	699a      	ldr	r2, [r3, #24]
 800089e:	f042 0208 	orr.w	r2, r2, #8
 80008a2:	619a      	str	r2, [r3, #24]
    SET_BIT(GPIOB->CRH, GPIO_CRH_CNF9_1 | GPIO_CRH_CNF8_1 | GPIO_CRH_CNF9_0 | GPIO_CRH_CNF8_0 |
 80008a4:	49bb      	ldr	r1, [pc, #748]	; (8000b94 <main+0x30c>)
 80008a6:	684a      	ldr	r2, [r1, #4]
 80008a8:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 80008ac:	604a      	str	r2, [r1, #4]
     RCC->APB1ENR |= RCC_APB1ENR_I2C1EN; 
 80008ae:	69da      	ldr	r2, [r3, #28]
 80008b0:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80008b4:	61da      	str	r2, [r3, #28]
     RCC->APB1ENR & RCC_APB1ENR_I2C1EN;
 80008b6:	69db      	ldr	r3, [r3, #28]
     I2C1->CR1 &= ~I2C_CR1_PE;
 80008b8:	4bb7      	ldr	r3, [pc, #732]	; (8000b98 <main+0x310>)
 80008ba:	881a      	ldrh	r2, [r3, #0]
 80008bc:	f022 0201 	bic.w	r2, r2, #1
 80008c0:	0412      	lsls	r2, r2, #16
 80008c2:	0c12      	lsrs	r2, r2, #16
 80008c4:	801a      	strh	r2, [r3, #0]
    MODIFY_REG(I2C1->CR2, I2C_CR2_FREQ, 32); //обнуление и запись для перефирийной шины 
 80008c6:	889a      	ldrh	r2, [r3, #4]
 80008c8:	b292      	uxth	r2, r2
 80008ca:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80008ce:	f042 0220 	orr.w	r2, r2, #32
 80008d2:	809a      	strh	r2, [r3, #4]
    MODIFY_REG(I2C1->TRISE, I2C_TRISE_TRISE, 32 + 1); //установка времени нарастания фронта
 80008d4:	8c1a      	ldrh	r2, [r3, #32]
 80008d6:	b292      	uxth	r2, r2
 80008d8:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80008dc:	f042 0221 	orr.w	r2, r2, #33	; 0x21
 80008e0:	841a      	strh	r2, [r3, #32]
    MODIFY_REG(I2C1->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), 180); // Thigh = Tlow = 180 * (1/32) = 5 mcs => f = 100 kHz
 80008e2:	8b9a      	ldrh	r2, [r3, #28]
 80008e4:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 80008e8:	f042 02b4 	orr.w	r2, r2, #180	; 0xb4
 80008ec:	839a      	strh	r2, [r3, #28]
    I2C1->CR1 |= I2C_CR1_PE;
 80008ee:	881a      	ldrh	r2, [r3, #0]
 80008f0:	b292      	uxth	r2, r2
 80008f2:	f042 0201 	orr.w	r2, r2, #1
 80008f6:	801a      	strh	r2, [r3, #0]
    MODIFY_REG(I2C1->OAR2, I2C_OAR2_ADD2, 0);
 80008f8:	899a      	ldrh	r2, [r3, #12]
 80008fa:	f022 02fe 	bic.w	r2, r2, #254	; 0xfe
 80008fe:	0412      	lsls	r2, r2, #16
 8000900:	0c12      	lsrs	r2, r2, #16
 8000902:	819a      	strh	r2, [r3, #12]
    AFIO->MAPR |= AFIO_MAPR_I2C1_REMAP;
 8000904:	4aa5      	ldr	r2, [pc, #660]	; (8000b9c <main+0x314>)
 8000906:	6853      	ldr	r3, [r2, #4]
 8000908:	f043 0302 	orr.w	r3, r3, #2
 800090c:	6053      	str	r3, [r2, #4]
     send_byte(COMMAND, 0xAE, 1);           // Display OFF
 800090e:	2201      	movs	r2, #1
 8000910:	21ae      	movs	r1, #174	; 0xae
 8000912:	4610      	mov	r0, r2
 8000914:	f7ff fe68 	bl	80005e8 <_Z9send_bytebhh>
     send_byte(COMMAND, 0x8D, 1);
 8000918:	2201      	movs	r2, #1
 800091a:	218d      	movs	r1, #141	; 0x8d
 800091c:	4610      	mov	r0, r2
 800091e:	f7ff fe63 	bl	80005e8 <_Z9send_bytebhh>
     send_byte(COMMAND, 0x14, 1);
 8000922:	2201      	movs	r2, #1
 8000924:	2114      	movs	r1, #20
 8000926:	4610      	mov	r0, r2
 8000928:	f7ff fe5e 	bl	80005e8 <_Z9send_bytebhh>
     send_byte(COMMAND, 0xAF, 1);
 800092c:	2201      	movs	r2, #1
 800092e:	21af      	movs	r1, #175	; 0xaf
 8000930:	4610      	mov	r0, r2
 8000932:	f7ff fe59 	bl	80005e8 <_Z9send_bytebhh>
     display_clear();
 8000936:	f7ff ff93 	bl	8000860 <_Z13display_clearv>
    for (uint8_t page = 0; page < 8; page++) {
 800093a:	4e99      	ldr	r6, [pc, #612]	; (8000ba0 <main+0x318>)
     display_clear();
 800093c:	f04f 08b0 	mov.w	r8, #176	; 0xb0
        send_byte(COMMAND, 0xB0 + page, 1); 
 8000940:	2501      	movs	r5, #1
        send_byte(COMMAND, 0x00, 1);
 8000942:	2700      	movs	r7, #0
        send_byte(COMMAND, 0x10, 1);
 8000944:	f04f 0910 	mov.w	r9, #16
        send_byte(COMMAND, 0xB0 + page, 1); 
 8000948:	462a      	mov	r2, r5
 800094a:	4641      	mov	r1, r8
 800094c:	4628      	mov	r0, r5
 800094e:	f7ff fe4b 	bl	80005e8 <_Z9send_bytebhh>
        send_byte(COMMAND, 0x00, 1);
 8000952:	462a      	mov	r2, r5
 8000954:	4639      	mov	r1, r7
 8000956:	4628      	mov	r0, r5
 8000958:	f7ff fe46 	bl	80005e8 <_Z9send_bytebhh>
        send_byte(COMMAND, 0x10, 1);
 800095c:	462a      	mov	r2, r5
 800095e:	4649      	mov	r1, r9
 8000960:	4628      	mov	r0, r5
 8000962:	f7ff fe41 	bl	80005e8 <_Z9send_bytebhh>
        for (uint8_t col = 0; col < 128; col++) {
 8000966:	f1a6 0480 	sub.w	r4, r6, #128	; 0x80
            send_byte(DATA, image[page * 128 + col], 1);
 800096a:	462a      	mov	r2, r5
 800096c:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8000970:	4638      	mov	r0, r7
 8000972:	f7ff fe39 	bl	80005e8 <_Z9send_bytebhh>
        for (uint8_t col = 0; col < 128; col++) {
 8000976:	42b4      	cmp	r4, r6
 8000978:	d1f7      	bne.n	800096a <main+0xe2>
    for (uint8_t page = 0; page < 8; page++) {
 800097a:	f108 0801 	add.w	r8, r8, #1
 800097e:	fa5f f888 	uxtb.w	r8, r8
 8000982:	3680      	adds	r6, #128	; 0x80
 8000984:	f1b8 0fb8 	cmp.w	r8, #184	; 0xb8
 8000988:	d1de      	bne.n	8000948 <main+0xc0>
 800098a:	4b86      	ldr	r3, [pc, #536]	; (8000ba4 <main+0x31c>)
     __disable_irq();
     i2c_init();
     ssd1315_init();
     display_image(image_1);

     for (uint32_t i=0;i<=30000000;i++) {}
 800098c:	3b01      	subs	r3, #1
 800098e:	d1fd      	bne.n	800098c <main+0x104>

     display_clear();
 8000990:	f7ff ff66 	bl	8000860 <_Z13display_clearv>
     send_byte(COMMAND, 0xB1, 1);
 8000994:	2201      	movs	r2, #1
 8000996:	21b1      	movs	r1, #177	; 0xb1
 8000998:	4610      	mov	r0, r2
 800099a:	f7ff fe25 	bl	80005e8 <_Z9send_bytebhh>
     send_byte(COMMAND, 0x00, 1);
 800099e:	2201      	movs	r2, #1
 80009a0:	2100      	movs	r1, #0
 80009a2:	4610      	mov	r0, r2
 80009a4:	f7ff fe20 	bl	80005e8 <_Z9send_bytebhh>
     send_byte(COMMAND, 0x10, 1);
 80009a8:	2201      	movs	r2, #1
 80009aa:	2110      	movs	r1, #16
 80009ac:	4610      	mov	r0, r2
 80009ae:	f7ff fe1b 	bl	80005e8 <_Z9send_bytebhh>
     symbol_draw((g_brightness/10) + '0');
 80009b2:	4d7d      	ldr	r5, [pc, #500]	; (8000ba8 <main+0x320>)
 80009b4:	7828      	ldrb	r0, [r5, #0]
 80009b6:	4c7d      	ldr	r4, [pc, #500]	; (8000bac <main+0x324>)
 80009b8:	fba4 3000 	umull	r3, r0, r4, r0
 80009bc:	08c0      	lsrs	r0, r0, #3
 80009be:	3030      	adds	r0, #48	; 0x30
 80009c0:	f7ff fe6c 	bl	800069c <_Z11symbol_drawc>
     symbol_draw((g_brightness%10) + '0');
 80009c4:	782b      	ldrb	r3, [r5, #0]
 80009c6:	fba4 1203 	umull	r1, r2, r4, r3
 80009ca:	08d2      	lsrs	r2, r2, #3
 80009cc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80009d0:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 80009d4:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80009d8:	b2c0      	uxtb	r0, r0
 80009da:	f7ff fe5f 	bl	800069c <_Z11symbol_drawc>
     symbol_draw('%');
 80009de:	2025      	movs	r0, #37	; 0x25
 80009e0:	f7ff fe5c 	bl	800069c <_Z11symbol_drawc>
     symbol_draw(' ');
 80009e4:	2020      	movs	r0, #32
 80009e6:	f7ff fe59 	bl	800069c <_Z11symbol_drawc>
     symbol_draw('-');
 80009ea:	202d      	movs	r0, #45	; 0x2d
 80009ec:	f7ff fe56 	bl	800069c <_Z11symbol_drawc>
     symbol_draw(' ');
 80009f0:	2020      	movs	r0, #32
 80009f2:	f7ff fe53 	bl	800069c <_Z11symbol_drawc>
     symbol_draw('G');
 80009f6:	2047      	movs	r0, #71	; 0x47
 80009f8:	f7ff fe50 	bl	800069c <_Z11symbol_drawc>
     symbol_draw('R');
 80009fc:	2052      	movs	r0, #82	; 0x52
 80009fe:	f7ff fe4d 	bl	800069c <_Z11symbol_drawc>
     symbol_draw('E');
 8000a02:	2045      	movs	r0, #69	; 0x45
 8000a04:	f7ff fe4a 	bl	800069c <_Z11symbol_drawc>
     symbol_draw('E');
 8000a08:	2045      	movs	r0, #69	; 0x45
 8000a0a:	f7ff fe47 	bl	800069c <_Z11symbol_drawc>
     symbol_draw('N');
 8000a0e:	204e      	movs	r0, #78	; 0x4e
 8000a10:	f7ff fe44 	bl	800069c <_Z11symbol_drawc>
     send_byte(COMMAND, 0xB3, 1); //строка от B0 до B7
 8000a14:	2201      	movs	r2, #1
 8000a16:	21b3      	movs	r1, #179	; 0xb3
 8000a18:	4610      	mov	r0, r2
 8000a1a:	f7ff fde5 	bl	80005e8 <_Z9send_bytebhh>
     send_byte(COMMAND, 0x00, 1); //столбец от 00 до
 8000a1e:	2201      	movs	r2, #1
 8000a20:	2100      	movs	r1, #0
 8000a22:	4610      	mov	r0, r2
 8000a24:	f7ff fde0 	bl	80005e8 <_Z9send_bytebhh>
     send_byte(COMMAND, 0x10, 1);
 8000a28:	2201      	movs	r2, #1
 8000a2a:	2110      	movs	r1, #16
 8000a2c:	4610      	mov	r0, r2
 8000a2e:	f7ff fddb 	bl	80005e8 <_Z9send_bytebhh>
     symbol_draw((b_brightness/10) + '0');
 8000a32:	4e5f      	ldr	r6, [pc, #380]	; (8000bb0 <main+0x328>)
 8000a34:	7830      	ldrb	r0, [r6, #0]
 8000a36:	fba4 3000 	umull	r3, r0, r4, r0
 8000a3a:	08c0      	lsrs	r0, r0, #3
 8000a3c:	3030      	adds	r0, #48	; 0x30
 8000a3e:	f7ff fe2d 	bl	800069c <_Z11symbol_drawc>
     symbol_draw((b_brightness%10) + '0');
 8000a42:	7832      	ldrb	r2, [r6, #0]
 8000a44:	fba4 1302 	umull	r1, r3, r4, r2
 8000a48:	08db      	lsrs	r3, r3, #3
 8000a4a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000a4e:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
 8000a52:	f102 0030 	add.w	r0, r2, #48	; 0x30
 8000a56:	b2c0      	uxtb	r0, r0
 8000a58:	f7ff fe20 	bl	800069c <_Z11symbol_drawc>
     symbol_draw('%');
 8000a5c:	2025      	movs	r0, #37	; 0x25
 8000a5e:	f7ff fe1d 	bl	800069c <_Z11symbol_drawc>
     symbol_draw(' ');
 8000a62:	2020      	movs	r0, #32
 8000a64:	f7ff fe1a 	bl	800069c <_Z11symbol_drawc>
     symbol_draw('-');
 8000a68:	202d      	movs	r0, #45	; 0x2d
 8000a6a:	f7ff fe17 	bl	800069c <_Z11symbol_drawc>
     symbol_draw(' ');
 8000a6e:	2020      	movs	r0, #32
 8000a70:	f7ff fe14 	bl	800069c <_Z11symbol_drawc>
     symbol_draw('B');
 8000a74:	2042      	movs	r0, #66	; 0x42
 8000a76:	f7ff fe11 	bl	800069c <_Z11symbol_drawc>
     symbol_draw('L');
 8000a7a:	204c      	movs	r0, #76	; 0x4c
 8000a7c:	f7ff fe0e 	bl	800069c <_Z11symbol_drawc>
     symbol_draw('U');
 8000a80:	2055      	movs	r0, #85	; 0x55
 8000a82:	f7ff fe0b 	bl	800069c <_Z11symbol_drawc>
     symbol_draw('E');
 8000a86:	2045      	movs	r0, #69	; 0x45
 8000a88:	f7ff fe08 	bl	800069c <_Z11symbol_drawc>
     strings_draw();

    //------------------UART----------------
    // Включаем тактирование для USART1 и GPIOA
    RCC->APB2ENR |= RCC_APB2ENR_USART1EN;  // USART1
 8000a8c:	4a40      	ldr	r2, [pc, #256]	; (8000b90 <main+0x308>)
 8000a8e:	6993      	ldr	r3, [r2, #24]
 8000a90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a94:	6193      	str	r3, [r2, #24]
    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;    // GPIOA
 8000a96:	6993      	ldr	r3, [r2, #24]
 8000a98:	f043 0304 	orr.w	r3, r3, #4
 8000a9c:	6193      	str	r3, [r2, #24]

    // Настройка GPIO для USART1 Tx (PA9) и Rx (PA10) 
    GPIOA->CRH &= ~GPIO_CRH_CNF9;
 8000a9e:	4b45      	ldr	r3, [pc, #276]	; (8000bb4 <main+0x32c>)
 8000aa0:	6859      	ldr	r1, [r3, #4]
 8000aa2:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8000aa6:	6059      	str	r1, [r3, #4]
    GPIOA->CRH |= GPIO_CRH_CNF9_1 | GPIO_CRH_MODE9;
 8000aa8:	6859      	ldr	r1, [r3, #4]
 8000aaa:	f041 01b0 	orr.w	r1, r1, #176	; 0xb0
 8000aae:	6059      	str	r1, [r3, #4]

    GPIOA->CRH &= ~GPIO_CRH_CNF10;
 8000ab0:	6859      	ldr	r1, [r3, #4]
 8000ab2:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 8000ab6:	6059      	str	r1, [r3, #4]
    GPIOA->CRH |= GPIO_CRH_CNF10_1;
 8000ab8:	6859      	ldr	r1, [r3, #4]
 8000aba:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8000abe:	6059      	str	r1, [r3, #4]
    GPIOA->BSRR |= GPIO_BSRR_BS10;
 8000ac0:	6919      	ldr	r1, [r3, #16]
 8000ac2:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8000ac6:	6119      	str	r1, [r3, #16]

    // Настройка USART1
    USART1->BRR = 2500; //9600 = 24МГц/(16*2500)
 8000ac8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8000acc:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8000ad0:	8119      	strh	r1, [r3, #8]
    USART1->CR1 = USART_CR1_UE | USART_CR1_TE | USART_CR1_RE; 
 8000ad2:	f242 010c 	movw	r1, #8204	; 0x200c
 8000ad6:	8199      	strh	r1, [r3, #12]
    //--------------------GPIO--------------
    RCC->APB2ENR |= RCC_APB2ENR_IOPCEN; // Включаем тактирование для GPIOC
 8000ad8:	6993      	ldr	r3, [r2, #24]
 8000ada:	f043 0310 	orr.w	r3, r3, #16
 8000ade:	6193      	str	r3, [r2, #24]
    GPIOC->CRH |= GPIO_CRH_MODE8;       // Настройка PC8 в режим выхода на 50 MHz
 8000ae0:	4b35      	ldr	r3, [pc, #212]	; (8000bb8 <main+0x330>)
 8000ae2:	6859      	ldr	r1, [r3, #4]
 8000ae4:	f041 0103 	orr.w	r1, r1, #3
 8000ae8:	6059      	str	r1, [r3, #4]
    GPIOC->CRH &= ~GPIO_CRH_CNF8;       // Сброс битов конфигурации
 8000aea:	6859      	ldr	r1, [r3, #4]
 8000aec:	f021 010c 	bic.w	r1, r1, #12
 8000af0:	6059      	str	r1, [r3, #4]
    GPIOC->CRH |= GPIO_CRH_CNF8_1;      // Альтернативная функция push-pull
 8000af2:	6859      	ldr	r1, [r3, #4]
 8000af4:	f041 0108 	orr.w	r1, r1, #8
 8000af8:	6059      	str	r1, [r3, #4]

    GPIOC->CRH |= GPIO_CRH_MODE9;       // Настройка PC9 в режим выхода на 50 MHz
 8000afa:	6859      	ldr	r1, [r3, #4]
 8000afc:	f041 0130 	orr.w	r1, r1, #48	; 0x30
 8000b00:	6059      	str	r1, [r3, #4]
    GPIOC->CRH &= ~GPIO_CRH_CNF9;       // Сброс битов конфигурации
 8000b02:	6859      	ldr	r1, [r3, #4]
 8000b04:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8000b08:	6059      	str	r1, [r3, #4]
    GPIOC->CRH |= GPIO_CRH_CNF9_1;      // Альтернативная функция push-pull
 8000b0a:	6859      	ldr	r1, [r3, #4]
 8000b0c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8000b10:	6059      	str	r1, [r3, #4]

    //---------------------таймер------------
    RCC->APB1ENR |= RCC_APB1ENR_TIM3EN; // Включаем тактирование для TIM3
 8000b12:	69d3      	ldr	r3, [r2, #28]
 8000b14:	f043 0302 	orr.w	r3, r3, #2
 8000b18:	61d3      	str	r3, [r2, #28]
    RCC->APB2ENR |= RCC_APB2ENR_AFIOEN; // Включаем тактирование для AFIO
 8000b1a:	6993      	ldr	r3, [r2, #24]
 8000b1c:	f043 0301 	orr.w	r3, r3, #1
 8000b20:	6193      	str	r3, [r2, #24]
    AFIO->MAPR |= AFIO_MAPR_TIM3_REMAP; // Переназначаем пины для TIM3
 8000b22:	f5a2 3288 	sub.w	r2, r2, #69632	; 0x11000
 8000b26:	6853      	ldr	r3, [r2, #4]
 8000b28:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8000b2c:	6053      	str	r3, [r2, #4]

    TIM3->PSC = 240;  // Предделитель
 8000b2e:	4b23      	ldr	r3, [pc, #140]	; (8000bbc <main+0x334>)
 8000b30:	22f0      	movs	r2, #240	; 0xf0
 8000b32:	851a      	strh	r2, [r3, #40]	; 0x28
    TIM3->ARR = 100;  // Автоматическая перезагрузка
 8000b34:	2264      	movs	r2, #100	; 0x64
 8000b36:	859a      	strh	r2, [r3, #44]	; 0x2c

    // Выбор режима ШИМ для канала 3
    TIM3->CCMR2 |= TIM_CCMR2_OC3M_1 | TIM_CCMR2_OC3M_2;
 8000b38:	8b9a      	ldrh	r2, [r3, #28]
 8000b3a:	b292      	uxth	r2, r2
 8000b3c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8000b40:	839a      	strh	r2, [r3, #28]
    TIM3->CCMR2 |= TIM_CCMR2_OC4M_1 | TIM_CCMR2_OC4M_2;
 8000b42:	8b9a      	ldrh	r2, [r3, #28]
 8000b44:	b292      	uxth	r2, r2
 8000b46:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8000b4a:	839a      	strh	r2, [r3, #28]

    // Разрешение события сравнения для канала 3 и 4
    TIM3->CCER |= TIM_CCER_CC3E;
 8000b4c:	8c1a      	ldrh	r2, [r3, #32]
 8000b4e:	b292      	uxth	r2, r2
 8000b50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000b54:	841a      	strh	r2, [r3, #32]
    TIM3->CCER |= TIM_CCER_CC4E;
 8000b56:	8c1a      	ldrh	r2, [r3, #32]
 8000b58:	b292      	uxth	r2, r2
 8000b5a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000b5e:	841a      	strh	r2, [r3, #32]

    // Предзагрузка
    TIM3->CR1 |= TIM_CR1_ARPE;
 8000b60:	881a      	ldrh	r2, [r3, #0]
 8000b62:	b292      	uxth	r2, r2
 8000b64:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000b68:	801a      	strh	r2, [r3, #0]

    // Включение таймера
    TIM3->CR1 |= TIM_CR1_CEN;
 8000b6a:	881a      	ldrh	r2, [r3, #0]
 8000b6c:	b292      	uxth	r2, r2
 8000b6e:	f042 0201 	orr.w	r2, r2, #1
 8000b72:	801a      	strh	r2, [r3, #0]

    TIM3->CCR3 = b_brightness;
 8000b74:	7832      	ldrb	r2, [r6, #0]
 8000b76:	879a      	strh	r2, [r3, #60]	; 0x3c
    TIM3->CCR4 = g_brightness;
 8000b78:	782a      	ldrb	r2, [r5, #0]
 8000b7a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    //--------------------------------------------------

    char buffer[BUFFER_SIZE] = {0}; 
 8000b7e:	2500      	movs	r5, #0
 8000b80:	9501      	str	r5, [sp, #4]
    char prev_buffer[BUFFER_SIZE] = {0};
 8000b82:	9500      	str	r5, [sp, #0]
    uint8_t brightness = 0;


    while (1) {

        if (USART1->SR & USART_SR_RXNE) {
 8000b84:	4c0e      	ldr	r4, [pc, #56]	; (8000bc0 <main+0x338>)
                buffer_index = 0;
                while (buffer_index < BUFFER_SIZE && buffer[buffer_index] != '\0') {
                    buffer_index++;
                }

                UART_sendstring("\r");
 8000b86:	4f0f      	ldr	r7, [pc, #60]	; (8000bc4 <main+0x33c>)
                
                for (int i = 0; i < BUFFER_SIZE; i++) {
                    UART_sendstring(" ");
 8000b88:	4e0f      	ldr	r6, [pc, #60]	; (8000bc8 <main+0x340>)
 8000b8a:	e0bd      	b.n	8000d08 <main+0x480>
            else {
                if (buffer_index < 5) {
                    buffer[buffer_index++] = received_char; 
                }
                else {
                    buffer_index = 0; 
 8000b8c:	2500      	movs	r5, #0
 8000b8e:	e0bb      	b.n	8000d08 <main+0x480>
 8000b90:	40021000 	.word	0x40021000
 8000b94:	40010c00 	.word	0x40010c00
 8000b98:	40005400 	.word	0x40005400
 8000b9c:	40010000 	.word	0x40010000
 8000ba0:	08001017 	.word	0x08001017
 8000ba4:	01c9c381 	.word	0x01c9c381
 8000ba8:	20000015 	.word	0x20000015
 8000bac:	cccccccd 	.word	0xcccccccd
 8000bb0:	20000014 	.word	0x20000014
 8000bb4:	40010800 	.word	0x40010800
 8000bb8:	40011000 	.word	0x40011000
 8000bbc:	40000400 	.word	0x40000400
 8000bc0:	40013800 	.word	0x40013800
 8000bc4:	08000f18 	.word	0x08000f18
 8000bc8:	08000f1c 	.word	0x08000f1c
                buffer[buffer_index] = '\0';
 8000bcc:	2200      	movs	r2, #0
 8000bce:	f105 0308 	add.w	r3, r5, #8
 8000bd2:	446b      	add	r3, sp
 8000bd4:	f803 2c04 	strb.w	r2, [r3, #-4]
                if (buffer_index == 3 && buffer[1] >= '0' && buffer[1] <= '9' && buffer[2] >= '0' && buffer[2] <= '9') {
 8000bd8:	2d03      	cmp	r5, #3
 8000bda:	d00c      	beq.n	8000bf6 <main+0x36e>
                else if (buffer_index == 4 && ((buffer[0] == 'g' && buffer[1] == 'b') || (buffer[0] == 'b' && buffer[1] == 'g')) 
 8000bdc:	2d04      	cmp	r5, #4
 8000bde:	d176      	bne.n	8000cce <main+0x446>
 8000be0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000be4:	2b67      	cmp	r3, #103	; 0x67
 8000be6:	d040      	beq.n	8000c6a <main+0x3e2>
 8000be8:	2b62      	cmp	r3, #98	; 0x62
 8000bea:	d170      	bne.n	8000cce <main+0x446>
 8000bec:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8000bf0:	2b67      	cmp	r3, #103	; 0x67
 8000bf2:	d16c      	bne.n	8000cce <main+0x446>
 8000bf4:	e03d      	b.n	8000c72 <main+0x3ea>
                if (buffer_index == 3 && buffer[1] >= '0' && buffer[1] <= '9' && buffer[2] >= '0' && buffer[2] <= '9') {
 8000bf6:	f89d 5005 	ldrb.w	r5, [sp, #5]
 8000bfa:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	2b09      	cmp	r3, #9
 8000c02:	d860      	bhi.n	8000cc6 <main+0x43e>
 8000c04:	f89d 8006 	ldrb.w	r8, [sp, #6]
 8000c08:	f1a8 0230 	sub.w	r2, r8, #48	; 0x30
 8000c0c:	b2d2      	uxtb	r2, r2
 8000c0e:	2a09      	cmp	r2, #9
 8000c10:	d85d      	bhi.n	8000cce <main+0x446>
                    brightness = ((buffer[1] - '0') << 3) + ((buffer[1] - '0') << 1) + (buffer[2] - '0');
 8000c12:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000c16:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8000c1a:	b2db      	uxtb	r3, r3
                    if (buffer[0] == 'b') {
 8000c1c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8000c20:	2a62      	cmp	r2, #98	; 0x62
 8000c22:	d005      	beq.n	8000c30 <main+0x3a8>
                    else if (buffer[0] == 'g') {
 8000c24:	2a67      	cmp	r2, #103	; 0x67
 8000c26:	d011      	beq.n	8000c4c <main+0x3c4>
                        invalid_command_message(buffer);
 8000c28:	a801      	add	r0, sp, #4
 8000c2a:	f7ff fc7f 	bl	800052c <_Z23invalid_command_messagePKc>
 8000c2e:	e051      	b.n	8000cd4 <main+0x44c>
                        TIM3->CCR3 = brightness;
 8000c30:	4a68      	ldr	r2, [pc, #416]	; (8000dd4 <main+0x54c>)
 8000c32:	8793      	strh	r3, [r2, #60]	; 0x3c
                        b_brightness = brightness;
 8000c34:	4a68      	ldr	r2, [pc, #416]	; (8000dd8 <main+0x550>)
 8000c36:	7013      	strb	r3, [r2, #0]
                        brightness_message(buffer, 'b');
 8000c38:	2162      	movs	r1, #98	; 0x62
 8000c3a:	a801      	add	r0, sp, #4
 8000c3c:	f7ff fc34 	bl	80004a8 <_Z18brightness_messagePKcc>
                        brightness_draw('b', buffer[1], buffer[2]);
 8000c40:	4642      	mov	r2, r8
 8000c42:	4629      	mov	r1, r5
 8000c44:	2062      	movs	r0, #98	; 0x62
 8000c46:	f7ff fd87 	bl	8000758 <_Z15brightness_drawccc>
 8000c4a:	e043      	b.n	8000cd4 <main+0x44c>
                        TIM3->CCR4 = brightness;
 8000c4c:	4a61      	ldr	r2, [pc, #388]	; (8000dd4 <main+0x54c>)
 8000c4e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
                        g_brightness = brightness;
 8000c52:	4a62      	ldr	r2, [pc, #392]	; (8000ddc <main+0x554>)
 8000c54:	7013      	strb	r3, [r2, #0]
                        brightness_message(buffer, 'g');
 8000c56:	2167      	movs	r1, #103	; 0x67
 8000c58:	a801      	add	r0, sp, #4
 8000c5a:	f7ff fc25 	bl	80004a8 <_Z18brightness_messagePKcc>
                        brightness_draw('g', buffer[1], buffer[2]);
 8000c5e:	4642      	mov	r2, r8
 8000c60:	4629      	mov	r1, r5
 8000c62:	2067      	movs	r0, #103	; 0x67
 8000c64:	f7ff fd78 	bl	8000758 <_Z15brightness_drawccc>
 8000c68:	e034      	b.n	8000cd4 <main+0x44c>
                else if (buffer_index == 4 && ((buffer[0] == 'g' && buffer[1] == 'b') || (buffer[0] == 'b' && buffer[1] == 'g')) 
 8000c6a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8000c6e:	2b62      	cmp	r3, #98	; 0x62
 8000c70:	d12d      	bne.n	8000cce <main+0x446>
                          && buffer[2] >= '0' && buffer[2] <= '9' && buffer[3] >= '0' && buffer[3] <= '9') {
 8000c72:	f89d 5006 	ldrb.w	r5, [sp, #6]
 8000c76:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	2b09      	cmp	r3, #9
 8000c7e:	d826      	bhi.n	8000cce <main+0x446>
 8000c80:	f89d 8007 	ldrb.w	r8, [sp, #7]
 8000c84:	f1a8 0230 	sub.w	r2, r8, #48	; 0x30
 8000c88:	b2d2      	uxtb	r2, r2
 8000c8a:	2a09      	cmp	r2, #9
 8000c8c:	d81f      	bhi.n	8000cce <main+0x446>
                    brightness = ((buffer[2] - '0') << 3) + ((buffer[2] - '0') << 1) + (buffer[3] - '0');
 8000c8e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000c92:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8000c96:	b2db      	uxtb	r3, r3
                    TIM3->CCR3 = brightness;
 8000c98:	4a4e      	ldr	r2, [pc, #312]	; (8000dd4 <main+0x54c>)
 8000c9a:	8793      	strh	r3, [r2, #60]	; 0x3c
                    TIM3->CCR4 = brightness;
 8000c9c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
                    b_brightness = brightness;
 8000ca0:	4a4d      	ldr	r2, [pc, #308]	; (8000dd8 <main+0x550>)
 8000ca2:	7013      	strb	r3, [r2, #0]
                    g_brightness = brightness;
 8000ca4:	4a4d      	ldr	r2, [pc, #308]	; (8000ddc <main+0x554>)
 8000ca6:	7013      	strb	r3, [r2, #0]
                    brightness_draw('b', buffer[2], buffer[3]);
 8000ca8:	4642      	mov	r2, r8
 8000caa:	4629      	mov	r1, r5
 8000cac:	2062      	movs	r0, #98	; 0x62
 8000cae:	f7ff fd53 	bl	8000758 <_Z15brightness_drawccc>
                    brightness_draw('g', buffer[2], buffer[3]);
 8000cb2:	4642      	mov	r2, r8
 8000cb4:	4629      	mov	r1, r5
 8000cb6:	2067      	movs	r0, #103	; 0x67
 8000cb8:	f7ff fd4e 	bl	8000758 <_Z15brightness_drawccc>
                    brightness_message(buffer, 'c');
 8000cbc:	2163      	movs	r1, #99	; 0x63
 8000cbe:	a801      	add	r0, sp, #4
 8000cc0:	f7ff fbf2 	bl	80004a8 <_Z18brightness_messagePKcc>
 8000cc4:	e006      	b.n	8000cd4 <main+0x44c>
                else if (buffer_index == 3 && buffer[0] == 'i' && buffer[1] == 'n' && buffer[2] == 'f') {
 8000cc6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000cca:	2b69      	cmp	r3, #105	; 0x69
 8000ccc:	d041      	beq.n	8000d52 <main+0x4ca>
                    invalid_command_message(buffer);
 8000cce:	a801      	add	r0, sp, #4
 8000cd0:	f7ff fc2c 	bl	800052c <_Z23invalid_command_messagePKc>
                    prev_buffer[i] = buffer[i];
 8000cd4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000cd8:	f88d 3000 	strb.w	r3, [sp]
 8000cdc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8000ce0:	f88d 3001 	strb.w	r3, [sp, #1]
 8000ce4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8000ce8:	f88d 3002 	strb.w	r3, [sp, #2]
 8000cec:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000cf0:	f88d 3003 	strb.w	r3, [sp, #3]
                    buffer[i] = ' ';
 8000cf4:	2320      	movs	r3, #32
 8000cf6:	f88d 3004 	strb.w	r3, [sp, #4]
 8000cfa:	f88d 3005 	strb.w	r3, [sp, #5]
 8000cfe:	f88d 3006 	strb.w	r3, [sp, #6]
 8000d02:	f88d 3007 	strb.w	r3, [sp, #7]
                buffer_index = 0; 
 8000d06:	2500      	movs	r5, #0
        if (USART1->SR & USART_SR_RXNE) {
 8000d08:	8823      	ldrh	r3, [r4, #0]
 8000d0a:	f013 0f20 	tst.w	r3, #32
 8000d0e:	d0fb      	beq.n	8000d08 <main+0x480>
            received_char = USART1->DR;
 8000d10:	88a2      	ldrh	r2, [r4, #4]
 8000d12:	b291      	uxth	r1, r2
 8000d14:	b2d2      	uxtb	r2, r2
            while (!(USART1->SR & USART_SR_TXE));
 8000d16:	8823      	ldrh	r3, [r4, #0]
 8000d18:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000d1c:	d0fb      	beq.n	8000d16 <main+0x48e>
            USART1->DR = received_char;
 8000d1e:	b2cb      	uxtb	r3, r1
 8000d20:	80a3      	strh	r3, [r4, #4]
            if (received_char == '\r' || received_char == '\n') {
 8000d22:	2a0d      	cmp	r2, #13
 8000d24:	f43f af52 	beq.w	8000bcc <main+0x344>
 8000d28:	2a0a      	cmp	r2, #10
 8000d2a:	f43f af4f 	beq.w	8000bcc <main+0x344>
            else if (received_char == 127 || received_char == '\b') { //стирание символа
 8000d2e:	2a7f      	cmp	r2, #127	; 0x7f
 8000d30:	d01c      	beq.n	8000d6c <main+0x4e4>
 8000d32:	2a08      	cmp	r2, #8
 8000d34:	d01a      	beq.n	8000d6c <main+0x4e4>
            else if (received_char == ' ') { 
 8000d36:	2a20      	cmp	r2, #32
 8000d38:	d01d      	beq.n	8000d76 <main+0x4ee>
                if (buffer_index < 5) {
 8000d3a:	2d04      	cmp	r5, #4
 8000d3c:	f63f af26 	bhi.w	8000b8c <main+0x304>
                    buffer[buffer_index++] = received_char; 
 8000d40:	1c6b      	adds	r3, r5, #1
 8000d42:	f105 0108 	add.w	r1, r5, #8
 8000d46:	eb0d 0501 	add.w	r5, sp, r1
 8000d4a:	f805 2c04 	strb.w	r2, [r5, #-4]
 8000d4e:	b2dd      	uxtb	r5, r3
 8000d50:	e7da      	b.n	8000d08 <main+0x480>
                else if (buffer_index == 3 && buffer[0] == 'i' && buffer[1] == 'n' && buffer[2] == 'f') {
 8000d52:	2d6e      	cmp	r5, #110	; 0x6e
 8000d54:	d1bb      	bne.n	8000cce <main+0x446>
 8000d56:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8000d5a:	2b66      	cmp	r3, #102	; 0x66
 8000d5c:	d1b7      	bne.n	8000cce <main+0x446>
                    info_message(g_brightness, b_brightness);
 8000d5e:	4b1e      	ldr	r3, [pc, #120]	; (8000dd8 <main+0x550>)
 8000d60:	7819      	ldrb	r1, [r3, #0]
 8000d62:	4b1e      	ldr	r3, [pc, #120]	; (8000ddc <main+0x554>)
 8000d64:	7818      	ldrb	r0, [r3, #0]
 8000d66:	f7ff fc2f 	bl	80005c8 <_Z12info_messagehh>
 8000d6a:	e7b3      	b.n	8000cd4 <main+0x44c>
                if (buffer_index > 0) {
 8000d6c:	2d00      	cmp	r5, #0
 8000d6e:	d0cb      	beq.n	8000d08 <main+0x480>
                    buffer_index--;
 8000d70:	3d01      	subs	r5, #1
 8000d72:	b2ed      	uxtb	r5, r5
 8000d74:	e7c8      	b.n	8000d08 <main+0x480>
                    buffer[i] = prev_buffer[i];
 8000d76:	f89d 3000 	ldrb.w	r3, [sp]
 8000d7a:	f88d 3004 	strb.w	r3, [sp, #4]
 8000d7e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8000d82:	f88d 3005 	strb.w	r3, [sp, #5]
 8000d86:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8000d8a:	f88d 3006 	strb.w	r3, [sp, #6]
 8000d8e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8000d92:	f88d 3007 	strb.w	r3, [sp, #7]
                for (int i = 0; i < BUFFER_SIZE; i++) {
 8000d96:	ab01      	add	r3, sp, #4
                buffer_index = 0;
 8000d98:	2500      	movs	r5, #0
                while (buffer_index < BUFFER_SIZE && buffer[buffer_index] != '\0') {
 8000d9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000d9e:	b11a      	cbz	r2, 8000da8 <main+0x520>
                    buffer_index++;
 8000da0:	3501      	adds	r5, #1
 8000da2:	b2ed      	uxtb	r5, r5
                while (buffer_index < BUFFER_SIZE && buffer[buffer_index] != '\0') {
 8000da4:	2d04      	cmp	r5, #4
 8000da6:	d1f8      	bne.n	8000d9a <main+0x512>
                UART_sendstring("\r");
 8000da8:	4638      	mov	r0, r7
 8000daa:	f7ff fb6d 	bl	8000488 <_Z15UART_sendstringPKc>
                    UART_sendstring(" ");
 8000dae:	4630      	mov	r0, r6
 8000db0:	f7ff fb6a 	bl	8000488 <_Z15UART_sendstringPKc>
 8000db4:	4630      	mov	r0, r6
 8000db6:	f7ff fb67 	bl	8000488 <_Z15UART_sendstringPKc>
 8000dba:	4630      	mov	r0, r6
 8000dbc:	f7ff fb64 	bl	8000488 <_Z15UART_sendstringPKc>
 8000dc0:	4630      	mov	r0, r6
 8000dc2:	f7ff fb61 	bl	8000488 <_Z15UART_sendstringPKc>
                UART_sendstring("\r");
 8000dc6:	4638      	mov	r0, r7
 8000dc8:	f7ff fb5e 	bl	8000488 <_Z15UART_sendstringPKc>
                UART_sendstring(buffer);
 8000dcc:	a801      	add	r0, sp, #4
 8000dce:	f7ff fb5b 	bl	8000488 <_Z15UART_sendstringPKc>
 8000dd2:	e799      	b.n	8000d08 <main+0x480>
 8000dd4:	40000400 	.word	0x40000400
 8000dd8:	20000014 	.word	0x20000014
 8000ddc:	20000015 	.word	0x20000015

08000de0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000de0:	f7ff f9f6 	bl	80001d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000de4:	480b      	ldr	r0, [pc, #44]	; (8000e14 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000de6:	490c      	ldr	r1, [pc, #48]	; (8000e18 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000de8:	4a0c      	ldr	r2, [pc, #48]	; (8000e1c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000dea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dec:	e002      	b.n	8000df4 <LoopCopyDataInit>

08000dee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000df2:	3304      	adds	r3, #4

08000df4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000df6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df8:	d3f9      	bcc.n	8000dee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dfa:	4a09      	ldr	r2, [pc, #36]	; (8000e20 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000dfc:	4c09      	ldr	r4, [pc, #36]	; (8000e24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e00:	e001      	b.n	8000e06 <LoopFillZerobss>

08000e02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e04:	3204      	adds	r2, #4

08000e06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e08:	d3fb      	bcc.n	8000e02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e0a:	f7ff faf9 	bl	8000400 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e0e:	f7ff fd3b 	bl	8000888 <main>
  bx lr
 8000e12:	4770      	bx	lr
  ldr r0, =_sdata
 8000e14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e18:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000e1c:	080013a8 	.word	0x080013a8
  ldr r2, =_sbss
 8000e20:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000e24:	20000034 	.word	0x20000034

08000e28 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e28:	e7fe      	b.n	8000e28 <ADC1_IRQHandler>
 8000e2a:	0000      	movs	r0, r0

08000e2c <_init>:
 8000e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e2e:	bf00      	nop
 8000e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e32:	bc08      	pop	{r3}
 8000e34:	469e      	mov	lr, r3
 8000e36:	4770      	bx	lr

08000e38 <_fini>:
 8000e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e3a:	bf00      	nop
 8000e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e3e:	bc08      	pop	{r3}
 8000e40:	469e      	mov	lr, r3
 8000e42:	4770      	bx	lr
